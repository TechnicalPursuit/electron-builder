{"version":3,"file":"linuxPackagerTest.js","sourceRoot":"","sources":["../../src/linux/linuxPackagerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, build, Platform } from \"electron-builder\"\nimport { outputFile, remove } from \"fs-extra\"\nimport * as path from \"path\"\nimport { GenericServerOptions } from \"builder-util-runtime\"\nimport { assertThat } from \"../helpers/fileAssert\"\nimport { app, appThrows, copyTestAsset, modifyPackageJson } from \"../helpers/packTester\"\nimport { ELECTRON_VERSION } from \"../helpers/testConfig\"\nimport { promises as fs } from \"fs\"\n\nconst appImageTarget = Platform.LINUX.createTarget(\"appimage\")\n\n// test update info file name\nconst testPublishConfig: GenericServerOptions = {\n  provider: \"generic\",\n  url: \"https://example.com/download\",\n}\n\ntest.ifNotWindows(\"AppImage\", app({\n  targets: appImageTarget,\n  config: {\n    publish: testPublishConfig,\n  },\n}))\n\n// also test os macro in output dir\ntest.ifAll.ifNotWindows.ifNotCiMac(\"AppImage ia32\", app({\n  targets: Platform.LINUX.createTarget(\"Appimage\", Arch.ia32),\n  config: {\n    directories: {\n      // tslint:disable:no-invalid-template-strings\n      output: \"dist/${os}\",\n    },\n    publish: testPublishConfig,\n  },\n}))\n\ntest.ifAll.ifNotWindows.ifNotCiMac(\"AppImage arm, max compression\", app({\n  targets: Platform.LINUX.createTarget(\"Appimage\", Arch.armv7l),\n  config: {\n    publish: testPublishConfig,\n    compression: \"maximum\",\n  },\n}))\n\ntest.ifNotWindows.ifNotCiMac.ifAll(\"AppImage - deprecated systemIntegration\", appThrows({\n  targets: appImageTarget,\n  config: {\n    appImage: {\n      systemIntegration: \"doNotAsk\",\n    } as any,\n  },\n}))\n\ntest.ifNotWindows.ifNotCiMac.ifAll(\"text license and file associations\", app({\n  targets: appImageTarget,\n  config: {\n    extraResources: {\n      from: \"build/icons\"\n    },\n    fileAssociations: [\n      {\n        ext: \"my-app\",\n        name: \"Test Foo\",\n        mimeType: \"application/x-example\",\n      }\n    ],\n  },\n}, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      // copy full text to test presentation\n      copyTestAsset(\"license_en.txt\", path.join(projectDir, \"build\", \"license.txt\")),\n    ])\n  }\n}))\n\ntest.ifNotWindows.ifNotCiMac.ifAll(\"html license\", app({\n  targets: appImageTarget,\n}, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      outputFile(path.join(projectDir, \"build\", \"license.html\"), `\n<html>\n<body>\n  <a href=\"http://example.com\">Test link</a>\n</body>      \n</html>\n      `)\n    ])\n  }\n}))\n\ntest.ifNotWindows.ifNotCiMac(\"AppImage - default icon, custom executable and custom desktop\", app({\n  targets: appImageTarget,\n  config: {\n    linux: {\n      executableName: \"Foo\",\n      desktop: {\n        \"X-Foo\": \"bar\",\n        Terminal: \"true\",\n      },\n    },\n    appImage: {\n      // tslint:disable-next-line:no-invalid-template-strings\n      artifactName: \"boo-${productName}\",\n    }\n  },\n  effectiveOptionComputed: async it => {\n    const content: string = it.desktop\n    expect(content.split(\"\\n\").filter(it => !it.includes(\"X-AppImage-BuildId\") && !it.includes(\"X-AppImage-Version\")).join(\"\\n\")).toMatchSnapshot()\n    return false\n  },\n}, {\n  projectDirCreated: it => remove(path.join(it, \"build\")),\n  packed: async context => {\n    const projectDir = context.getContent(Platform.LINUX)\n    await assertThat(path.join(projectDir, \"Foo\")).isFile()\n  },\n}))\n\ntest.ifNotWindows(\"icons from ICNS (mac)\", app({\n  targets: appImageTarget,\n  config: {\n    publish: null,\n    mac: {\n      icon: \"resources/time.icns\",\n    },\n    // test https://github.com/electron-userland/electron-builder/issues/3510\n    linux: {\n      artifactName: \"app-${version}-${arch}.${ext}\",\n    }\n  },\n}, {\n  projectDirCreated: async projectDir => {\n    await fs.mkdir(path.join(projectDir, \"resources\"), {recursive: true}).then(() => fs.rename(path.join(projectDir, \"build\", \"icon.icns\"), path.join(projectDir, \"resources\", \"time.icns\")))\n    await remove(path.join(projectDir, \"build\"))\n  },\n  packed: async context => {\n    const projectDir = context.getResources(Platform.LINUX)\n    await assertThat(projectDir).isDirectory()\n  },\n}))\n\ntest.ifNotWindows(\"icons from ICNS if nothing specified\", app({\n  targets: appImageTarget,\n  config: {\n    publish: null,\n  },\n}, {\n  projectDirCreated: async projectDir => {\n    await remove(path.join(projectDir, \"build\", \"icons\"))\n  },\n}))\n\ntest.ifNotWindows(\"icons from dir and one icon with suffix\", app({\n  targets: appImageTarget,\n  config: {\n    publish: null,\n  },\n}, {\n  projectDirCreated: async projectDir => {\n    await fs.copyFile(path.join(projectDir, \"build\", \"icons\", \"16x16.png\"), path.join(projectDir, \"build\", \"icons\", \"16x16-dev.png\"))\n  },\n  packed: async context => {\n    const projectDir = context.getResources(Platform.LINUX)\n    await assertThat(projectDir).isDirectory()\n  },\n}))\n\ntest.ifNotWindows(\"icons dir with images without size in the filename\", app({\n  targets: appImageTarget,\n  config: {\n    publish: null,\n    win: {\n      // doesn't matter, but just to be sure that presense of this configuration doesn't lead to errors\n      icon: \"icons/icon.ico\",\n    },\n  },\n}, {\n  projectDirCreated: async projectDir => {\n    await fs.rename(path.join(projectDir, \"build\", \"icons\", \"256x256.png\"), path.join(projectDir, \"build\", \"icon.png\"))\n    await remove(path.join(projectDir, \"build\", \"icons\"))\n    await fs.rename(path.join(projectDir, \"build\"), path.join(projectDir, \"icons\"))\n  },\n  packed: async context => {\n    const projectDir = context.getResources(Platform.LINUX)\n    await assertThat(projectDir).isDirectory()\n  },\n}))\n\n// test prepacked asar also https://github.com/electron-userland/electron-builder/issues/1102\ntest.ifNotWindows(\"icons from ICNS\", app({\n  targets: appImageTarget,\n  config: {\n    publish: null,\n  },\n}, {\n  projectDirCreated: it => remove(path.join(it, \"build\", \"icons\")),\n  packed: async context => {\n    const projectDir = context.getResources(Platform.LINUX)\n\n    await remove(path.join(projectDir, \"inspector\"))\n\n    await build({\n      targets: appImageTarget,\n      projectDir,\n      publish: \"never\",\n      config: {\n        electronVersion: ELECTRON_VERSION,\n        compression: \"store\",\n        npmRebuild: false,\n      }\n    })\n\n    await assertThat(path.join(projectDir, \"dist\")).isDirectory()\n  },\n}))\n\ntest.ifNotWindows(\"no-author-email\", appThrows({targets: Platform.LINUX.createTarget(\"deb\")}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.author = \"Foo\"\n  })\n}))\n\ntest.ifNotWindows(\"forbid desktop.Exec\", appThrows({\n  targets: Platform.LINUX.createTarget(\"AppImage\"),\n  config: {\n    linux: {\n      desktop: {\n        Exec: \"foo\"\n      }\n    }\n  }\n}))"]}