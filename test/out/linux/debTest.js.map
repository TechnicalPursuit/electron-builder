{"version":3,"file":"debTest.js","sourceRoot":"","sources":["../../src/linux/debTest.ts"],"names":[],"mappings":";;AAAA,uDAAiD;AACjD,2BAAmC;AACnC,sDAAwE;AAExE,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,gBAAG,CAAC;IAC3B,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC;CAC5C,CAAC,CAAC,CAAA;AAEH,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,gBAAG,CAAC,EAAC,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,uBAAI,CAAC,MAAM,EAAE,uBAAI,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC,CAAA;AAErG,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,gBAAG,CAAC;IACtC,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC;IAC3C,MAAM,EAAE;QACN,KAAK,EAAE;YACL,cAAc,EAAE,KAAK;SACtB;QACD,GAAG,EAAE;YACH,OAAO,EAAE,CAAC,KAAK,CAAC;SACjB;KACF;CACF,CAAC,CAAC,CAAA;AAEH,IAAI,CAAC,YAAY,CAAC,8BAA8B,EAAE,gBAAG,CAAC;IACpD,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC;IAC3C,MAAM,EAAE;QACN,WAAW,EAAE,KAAK;QAClB,KAAK,EAAE;YACL,cAAc,EAAE,KAAK;SACtB;KACF;IACD,uBAAuB,EAAE,KAAK,EAAC,EAAE,EAAC,EAAE;QAClC,MAAM,OAAO,GAAG,MAAM,aAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;QAChD,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,CAAA;QACjC,OAAO,KAAK,CAAA;IACd,CAAC;CACF,CAAC,CAAC,CAAA;AAEH,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,uBAAuB,EAAE,gBAAG,CAAC;IACnD,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC;IAC3C,MAAM,EAAE;QACN,gBAAgB,EAAE;YAChB;gBACE,GAAG,EAAE,QAAQ;gBACb,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,uBAAuB;aAClC;SACF;KACF;CACF,EAAE;IACD,MAAM,EAAE,KAAK,EAAC,OAAO,EAAC,EAAE;QACtB,MAAM,IAAI,GAAG,CAAC,MAAM,sBAAS,CAAC,SAAS,OAAO,CAAC,MAAM,2CAA2C,MAAM,6BAAgB,EAAE,uDAAuD,EAAE;YAC/K,SAAS,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;SAC5B,CAAC,CAAC,CAAC,MAAM,CAAA;QACV,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,eAAe,EAAE,CAAA;IACvC,CAAC;CACF,CAAC,CAAC,CAAA","sourcesContent":["import { Arch, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport { app, execShell, getTarExecutable } from \"../helpers/packTester\"\n\ntest.ifNotWindows(\"deb\", app({\n  targets: Platform.LINUX.createTarget(\"deb\"),\n}))\n\ntest.ifNotWindows(\"arm\", app({targets: Platform.LINUX.createTarget(\"deb\", Arch.armv7l, Arch.arm64)}))\n\ntest.ifNotWindows(\"custom depends\", app({\n  targets: Platform.LINUX.createTarget(\"deb\"),\n  config: {\n    linux: {\n      executableName: \"Boo\",\n    },\n    deb: {\n      depends: [\"foo\"],\n    },\n  },\n}))\n\ntest.ifNotWindows(\"no quotes for safe exec name\", app({\n  targets: Platform.LINUX.createTarget(\"deb\"),\n  config: {\n    productName: \"foo\",\n    linux: {\n      executableName: \"Boo\",\n    },\n  },\n  effectiveOptionComputed: async it => {\n    const content = await fs.readFile(it[1], \"utf8\")\n    expect(content).toMatchSnapshot()\n    return false\n  }\n}))\n\ntest.ifNotWindows.ifAll(\"deb file associations\", app({\n  targets: Platform.LINUX.createTarget(\"deb\"),\n  config: {\n    fileAssociations: [\n      {\n        ext: \"my-app\",\n        name: \"Test Foo\",\n        mimeType: \"application/x-example\",\n      }\n    ],\n  },\n}, {\n  packed: async context => {\n    const mime = (await execShell(`ar p '${context.outDir}/TestApp_1.1.0_amd64.deb' data.tar.xz | ${await getTarExecutable()} Jx --to-stdout ./usr/share/mime/packages/testapp.xml`, {\n      maxBuffer: 10 * 1024 * 1024,\n    })).stdout\n    expect(mime.trim()).toMatchSnapshot()\n  }\n}))"]}