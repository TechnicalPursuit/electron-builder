{"version":3,"file":"snapTest.js","sourceRoot":"","sources":["../../src/linux/snapTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, Platform } from \"electron-builder\"\nimport { app, assertPack, snapTarget } from \"../helpers/packTester\"\n\nif (process.env.SNAP_TEST === \"false\") {\n  fit(\"Skip snapTest suite — SNAP_TEST is set to false or Windows\", () => {\n    console.warn(\"[SKIP] Skip snapTest suite — SNAP_TEST is set to false\")\n  })\n}\nelse if (process.platform === \"win32\") {\n  fit(\"Skip snapTest suite — Windows is not supported\", () => {\n    console.warn(\"[SKIP] Skip snapTest suite — Windows is not supported\")\n  })\n}\n\ntest.ifAll.ifDevOrLinuxCi(\"snap\", app({\n  targets: snapTarget,\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n  },\n}))\n\ntest.ifAll.ifDevOrLinuxCi(\"arm\", app({\n  targets: Platform.LINUX.createTarget(\"snap\", Arch.armv7l),\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n  },\n}))\n\ntest.ifAll.ifDevOrLinuxCi(\"default stagePackages\", async () => {\n  for (const p of [[\"default\"], [\"default\", \"custom\"], [\"custom\", \"default\"], [\"foo1\", \"default\", \"foo2\"]]) {\n    await assertPack(\"test-app-one\", {\n      targets: Platform.LINUX.createTarget(\"snap\"),\n      config: {\n        extraMetadata: {\n          name: \"sep\",\n        },\n        productName: \"Sep\",\n        snap: {\n          stagePackages: p,\n          plugs: p,\n          confinement: \"classic\",\n          // otherwise \"parts\" will be removed\n          useTemplateApp: false,\n        }\n      },\n      effectiveOptionComputed: async ({snap, args}) => {\n        delete snap.parts.app.source\n        expect(snap).toMatchSnapshot()\n        expect(args).not.toContain(\"--exclude\")\n        return true\n      },\n    })\n  }\n})\n\ntest.ifAll.ifDevOrLinuxCi(\"classic confinement\", app({\n  targets: snapTarget,\n  config: {\n    extraMetadata: {\n      name: \"cl-co-app\",\n    },\n    productName: \"Snap Electron App (classic confinement)\",\n    snap: {\n      confinement: \"classic\",\n    },\n  },\n}))\n\ntest.ifAll.ifDevOrLinuxCi(\"buildPackages\", async () => {\n  await assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(\"snap\"),\n    config: {\n      extraMetadata: {\n        name: \"sep\",\n      },\n      productName: \"Sep\",\n      snap: {\n        buildPackages: [\"foo1\", \"default\", \"foo2\"],\n        // otherwise \"parts\" will be removed\n        useTemplateApp: false,\n      }\n    },\n    effectiveOptionComputed: async ({snap}) => {\n      delete snap.parts.app.source\n      expect(snap).toMatchSnapshot()\n      return true\n    },\n  })\n})\n\ntest.ifDevOrLinuxCi(\"plugs option\", async () => {\n  for (const p of [\n    [\n      {\n        \"browser-sandbox\": {\n          interface: \"browser-support\",\n          \"allow-sandbox\": true\n        },\n      },\n      \"another-simple-plug-name\",\n    ],\n    {\n      \"browser-sandbox\": {\n        interface: \"browser-support\",\n        \"allow-sandbox\": true\n      },\n      \"another-simple-plug-name\": null,\n    },\n  ]) {\n    await assertPack(\"test-app-one\", {\n      targets: Platform.LINUX.createTarget(\"snap\"),\n      config: {\n        snap: {\n          plugs: p,\n          // otherwise \"parts\" will be removed\n          useTemplateApp: false,\n        }\n      },\n      effectiveOptionComputed: async ({snap, args}) => {\n        delete snap.parts.app.source\n        expect(snap).toMatchSnapshot()\n        expect(args).not.toContain(\"--exclude\")\n        return true\n      },\n    })\n  }\n})\n\ntest.ifDevOrLinuxCi(\"slots option\", app({\n  targets: Platform.LINUX.createTarget(\"snap\"),\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n    snap: {\n      slots: [ \"foo\", \"bar\" ],\n    }\n  },\n  effectiveOptionComputed: async ({snap}) => {\n    expect(snap).toMatchSnapshot()\n    return true\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"custom env\", app({\n  targets: Platform.LINUX.createTarget(\"snap\"),\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n    snap: {\n      environment: {\n        FOO: \"bar\",\n      },\n    }\n  },\n  effectiveOptionComputed: async ({snap}) => {\n    expect(snap).toMatchSnapshot()\n    return true\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"custom after, no desktop\", app({\n  targets: Platform.LINUX.createTarget(\"snap\"),\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n    snap: {\n      after: [\"bar\"],\n    }\n  },\n  effectiveOptionComputed: async ({ snap }) => {\n    expect(snap).toMatchSnapshot()\n    return true\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"no desktop plugs\", app({\n  targets: Platform.LINUX.createTarget(\"snap\"),\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n    snap: {\n      plugs: [\"foo\", \"bar\"]\n    }\n  },\n  effectiveOptionComputed: async ({ snap, args }) => {\n    expect(snap).toMatchSnapshot()\n    expect(args).toContain(\"--exclude\")\n    return true\n  },\n}))\n\ntest.ifAll.ifDevOrLinuxCi(\"auto start\", app({\n  targets: snapTarget,\n  config: {\n    extraMetadata: {\n      name: \"sep\",\n    },\n    productName: \"Sep\",\n    snap: {\n      autoStart: true\n    }\n  },\n  effectiveOptionComputed: async ({ snap, args }) => {\n    expect(snap).toMatchSnapshot()\n    expect(snap.apps.sep.autostart).toEqual(\"sep.desktop\")\n    return true\n  },\n}))\n"]}