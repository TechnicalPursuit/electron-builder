{"version":3,"file":"extraMetadataTest.js","sourceRoot":"","sources":["../src/extraMetadataTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIR_TARGET, Platform } from \"electron-builder\"\nimport { readAsarJson } from \"app-builder-lib/out/asar/asar\"\nimport { coerceTypes } from \"electron-builder/out/builder\"\nimport { readJson } from \"fs-extra\"\nimport * as path from \"path\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { app, modifyPackageJson } from \"./helpers/packTester\"\n\nfunction createExtraMetadataTest(asar: boolean) {\n  return app({\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    config: coerceTypes({\n      asar,\n      linux: {\n        executableName: \"new-name\",\n      },\n      extraMetadata: {\n        version: \"1.0.0-beta.19\",\n        foo: {\n          bar: 12,\n          updated: \"true\",\n          disabled: \"false\",\n        },\n        rootKey: \"false\",\n        rootKeyT: \"true\",\n        rootKeyN: \"null\",\n      },\n    }),\n  }, {\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      data.scripts = {}\n      data.devDependencies = {foo: \"boo\"}\n      data.foo = {\n        bar: 42,\n        existingProp: 22,\n      }\n    }),\n    packed: async context => {\n      await assertThat(path.join(context.getContent(Platform.LINUX), \"new-name\")).isFile()\n      if (asar) {\n        expect(await readAsarJson(path.join(context.getResources(Platform.LINUX), \"app.asar\"), \"package.json\")).toMatchSnapshot()\n      }\n      else {\n        expect(await readJson(path.join(context.getResources(Platform.LINUX), \"app\", \"package.json\"))).toMatchSnapshot()\n      }\n    }\n  })\n}\n\ntest.ifDevOrLinuxCi(\"extra metadata\", createExtraMetadataTest(true))\ntest.ifDevOrLinuxCi(\"extra metadata (no asar)\", createExtraMetadataTest(false))\n\ntest(\"cli\", async () => {\n  // because these methods are internal\n  const { configureBuildCommand, normalizeOptions } = require(\"electron-builder/out/builder\")\n  const yargs =\n    require(\"yargs\")\n      .strict()\n      .fail((message: string, error: Error | null) => {\n        throw error || new Error(message)\n      })\n  configureBuildCommand(yargs)\n\n  function parse(input: string): any {\n    return normalizeOptions(yargs.parse(input.split(\" \")))\n  }\n\n  function parseExtraMetadata(input: string) {\n    const result = parse(input)\n    delete result.targets\n    return result\n  }\n\n  expect(parseExtraMetadata(\"--c.extraMetadata.foo=bar\")).toMatchSnapshot()\n  expect(parseExtraMetadata(\"--c.extraMetadata.dev.login-url\")).toMatchSnapshot()\n})"]}