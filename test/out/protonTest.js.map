{"version":3,"file":"protonTest.js","sourceRoot":"","sources":["../src/protonTest.ts"],"names":[],"mappings":";;AAAA,4CAA6C;AAC7C,uDAAiD;AACjD,qDAA6D;AAE7D,MAAM,YAAY,GAAsB;IACtC,iBAAiB,EAAE,KAAK,EAAC,UAAU,EAAC,EAAE;QACpC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAA;QACvD,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,MAAM,YAAO,CAAC,GAAG,EAAE,UAAU,GAAG,eAAe,CAAC,CAAA;SACjD;IACH,CAAC;IACD,mBAAmB,EAAE,KAAK;CAC3B,CAAA;AAED,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,gBAAG,CAAC;IAC1B,OAAO,EAAE,2BAAQ,CAAC,GAAG,CAAC,YAAY,EAAE;IACpC,MAAM,EAAE;QACN,SAAS,EAAE,QAAQ;KACpB;CACF,EAAE,YAAY,CAAC,CAAC,CAAA;AAEjB,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,EAAE,gBAAG,CAAC;IACtC,OAAO,EAAE,2BAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC;IAChD,MAAM,EAAE;QACN,SAAS,EAAE,QAAQ;KACpB;CACF,EAAE,YAAY,CAAC,CAAC,CAAA;AAEjB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,gBAAG,CAAC;IACjC,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC;IAC9C,MAAM,EAAE;QACN,SAAS,EAAE,QAAQ;KACpB;CACF,EAAE,YAAY,CAAC,CAAC,CAAA;AAEjB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,gBAAG,CAAC;IACtC,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,uBAAI,CAAC,IAAI,CAAC;IACzD,MAAM,EAAE;QACN,SAAS,EAAE,QAAQ;KACpB;CACF,EAAE,YAAY,CAAC,CAAC,CAAA","sourcesContent":["import { copyDir } from \"builder-util/out/fs\"\nimport { Arch, Platform } from \"electron-builder\"\nimport { app, AssertPackOptions } from \"./helpers/packTester\"\n\nconst checkOptions: AssertPackOptions = {\n  projectDirCreated: async projectDir => {\n    const src = process.env.PROTON_NATIVE_TEST_NODE_MODULES\n    if (src != null) {\n      await copyDir(src, projectDir + \"/node_modules\")\n    }\n  },\n  isInstallDepsBefore: false,\n}\n\ntest.ifAll.ifMac(\"mac\", app({\n  targets: Platform.MAC.createTarget(),\n  config: {\n    framework: \"proton\",\n  },\n}, checkOptions))\n\ntest.ifAll.ifLinuxOrDevMac(\"linux\", app({\n  targets: Platform.LINUX.createTarget(\"appimage\"),\n  config: {\n    framework: \"proton\",\n  },\n}, checkOptions))\n\ntest.ifAll.ifDevOrWinCi(\"win\", app({\n  targets: Platform.WINDOWS.createTarget(\"nsis\"),\n  config: {\n    framework: \"proton\",\n  },\n}, checkOptions))\n\ntest.ifAll.ifDevOrWinCi(\"win ia32\", app({\n  targets: Platform.WINDOWS.createTarget(\"nsis\", Arch.ia32),\n  config: {\n    framework: \"proton\",\n  },\n}, checkOptions))"]}