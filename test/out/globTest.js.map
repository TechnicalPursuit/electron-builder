{"version":3,"file":"globTest.js","sourceRoot":"","sources":["../src/globTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIR_TARGET, Platform } from \"app-builder-lib\"\nimport { readAsar } from \"app-builder-lib/out/asar/asar\"\nimport { outputFile } from \"fs-extra\"\nimport * as path from \"path\"\nimport { promises as fs } from \"fs\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { app, assertPack, modifyPackageJson, PackedContext, removeUnstableProperties, verifyAsarFileTree } from \"./helpers/packTester\"\n\nasync function createFiles(appDir: string) {\n  await Promise.all([\n    outputFile(path.join(appDir, \"assets\", \"file\"), \"data\"),\n    outputFile(path.join(appDir, \"b2\", \"file\"), \"data\"),\n    outputFile(path.join(appDir, \"do-not-unpack-dir\", \"file.json\"), \"{}\")\n      .then(() => fs.writeFile(path.join(appDir, \"do-not-unpack-dir\", \"must-be-not-unpacked\"), \"{}\"))\n  ])\n\n  const dir = path.join(appDir, \"do-not-unpack-dir\", \"dir-2\", \"dir-3\", \"dir-3\")\n  await fs.mkdir(dir, {recursive: true})\n  await fs.writeFile(path.join(dir, \"file-in-asar\"), \"{}\")\n\n  await fs.symlink(path.join(appDir, \"assets\", \"file\"), path.join(appDir, \"assets\", \"file-symlink\"))\n}\n\ntest.ifNotWindows.ifDevOrLinuxCi(\"unpackDir one\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  config: {\n    asarUnpack: [\n      \"assets\",\n      \"b2\",\n      \"do-not-unpack-dir/file.json\",\n    ],\n  }\n}, {\n  projectDirCreated: createFiles,\n  packed: assertDirs,\n}))\n\nasync function assertDirs(context: PackedContext) {\n  const resourceDir = context.getResources(Platform.LINUX)\n  await Promise.all([\n    assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"assets\")).isDirectory(),\n    assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"b2\")).isDirectory(),\n    assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"do-not-unpack-dir\", \"file.json\")).isFile(),\n    assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"do-not-unpack-dir\", \"must-be-not-unpacked\")).doesNotExist(),\n    assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"do-not-unpack-dir\", \"dir-2\")).doesNotExist(),\n  ])\n\n  await verifyAsarFileTree(resourceDir)\n}\n\ntest.ifNotWindows.ifDevOrLinuxCi(\"unpackDir\", () => {\n  return assertPack(\"test-app\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    config: {\n      asarUnpack: [\"assets\", \"b2\", \"do-not-unpack-dir/file.json\"],\n    }\n  }, {\n    projectDirCreated: projectDir => createFiles(path.join(projectDir, \"app\")),\n    packed: assertDirs,\n  })\n})\n\ntest.ifDevOrLinuxCi(\"asarUnpack and files ignore\", () => {\n  return assertPack(\"test-app\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    config: {\n      asarUnpack: [\n        \"!**/ffprobe-static/bin/darwin/x64/ffprobe\"\n      ],\n    }\n  }, {\n    projectDirCreated: projectDir => outputFile(path.join(projectDir, \"node_modules/ffprobe-static/bin/darwin/x64/ffprobe\"), \"data\"),\n    packed: async context => {\n      const resourceDir = context.getResources(Platform.LINUX)\n      await Promise.all([\n        assertThat(path.join(resourceDir, \"app.asar.unpacked\", \"node_modules/ffprobe-static/bin/darwin/x64/ffprobe\")).doesNotExist(),\n      ])\n\n      await verifyAsarFileTree(context.getResources(Platform.LINUX))\n    },\n  })\n})\n\ntest.ifNotWindows(\"link\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => {\n    return fs.symlink(path.join(projectDir, \"index.js\"), path.join(projectDir, \"foo.js\"))\n  },\n  packed: async context => {\n    expect((await readAsar(path.join(context.getResources(Platform.LINUX), \"app.asar\"))).getFile(\"foo.js\", false)).toMatchSnapshot()\n  },\n}))\n\ntest.ifNotWindows(\"outside link\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: async (projectDir, tmpDir) => {\n    const tempDir = await tmpDir.getTempDir()\n    await outputFile(path.join(tempDir, \"foo\"), \"data\")\n    await fs.symlink(tempDir, path.join(projectDir, \"o-dir\"))\n  },\n  packed: async context => {\n    expect((await readAsar(path.join(context.getResources(Platform.LINUX), \"app.asar\"))).getFile(\"o-dir/foo\", false)).toMatchSnapshot()\n  },\n}))\n\n// cannot be enabled\n// https://github.com/electron-userland/electron-builder/issues/611\ntest.ifDevOrLinuxCi(\"failed peer dep\", () => {\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n  }, {\n    isInstallDepsBefore: true,\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      //noinspection SpellCheckingInspection\n      data.dependencies = {\n        \"rc-datepicker\": \"4.0.0\",\n        react: \"15.2.1\",\n        \"react-dom\": \"15.2.1\"\n      }\n    }),\n  })\n})\n\ntest.ifAll.ifDevOrLinuxCi(\"ignore node_modules\", () => {\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    config: {\n      asar: false,\n      files: [\n        \"!node_modules/**/*\"\n      ]\n    }\n  }, {\n    isInstallDepsBefore: true,\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      //noinspection SpellCheckingInspection\n      data.dependencies = {\n        \"ci-info\": \"2.0.0\",\n      }\n    }),\n    packed: context => {\n      return assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"node_modules\")).doesNotExist()\n    }\n  })\n})\n\ntest.ifAll.ifDevOrLinuxCi(\"asarUnpack node_modules\", () => {\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    config: {\n      asarUnpack: \"node_modules\",\n    }\n  }, {\n    isInstallDepsBefore: true,\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      data.dependencies = {\n        \"ci-info\": \"2.0.0\",\n      }\n    }),\n    packed: async context => {\n      const nodeModulesNode = (await readAsar(path.join(context.getResources(Platform.LINUX), \"app.asar\"))).getNode(\"node_modules\")\n      expect(removeUnstableProperties(nodeModulesNode)).toMatchSnapshot()\n      await assertThat(path.join(context.getResources(Platform.LINUX), \"app.asar.unpacked/node_modules/ci-info\")).isDirectory()\n    }\n  })\n})"]}