{"version":3,"file":"updaterTestUtil.js","sourceRoot":"","sources":["../../src/helpers/updaterTestUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { serializeToYaml, TmpDir, executeAppBuilder } from \"builder-util\"\nimport { BintrayOptions, GenericServerOptions, GithubOptions, S3Options, SpacesOptions, DownloadOptions } from \"builder-util-runtime\"\nimport { AppUpdater, NoOpLogger } from \"electron-updater\"\nimport { MacUpdater } from \"electron-updater/out/MacUpdater\"\nimport { outputFile } from \"fs-extra\"\nimport * as path from \"path\"\nimport { TestOnlyUpdaterOptions } from \"electron-updater/out/AppUpdater\"\nimport { NsisUpdater } from \"electron-updater/out/NsisUpdater\"\nimport { TestAppAdapter } from \"./TestAppAdapter\"\nimport { assertThat } from \"./fileAssert\"\nimport { NodeHttpExecutor } from \"builder-util/out/nodeHttpExecutor\"\n\nconst tmpDir = new TmpDir(\"updater-test-util\")\n\nexport async function createTestAppAdapter(version: string = \"0.0.1\") {\n  return new TestAppAdapter(version, await tmpDir.getTempDir())\n}\n\nexport async function createNsisUpdater(version: string = \"0.0.1\") {\n  const testAppAdapter = await createTestAppAdapter(version)\n  const result = new NsisUpdater(null, testAppAdapter)\n  await tuneTestUpdater(result)\n  return result\n}\n\n// to reduce difference in test mode, setFeedURL is not used to set (NsisUpdater also read configOnDisk to load original publisherName)\nexport async function writeUpdateConfig<T extends GenericServerOptions | GithubOptions | BintrayOptions | S3Options | SpacesOptions>(data: T): Promise<string> {\n  const updateConfigPath = path.join(await tmpDir.getTempDir({prefix: \"test-update-config\"}), \"app-update.yml\")\n  await outputFile(updateConfigPath, serializeToYaml(data))\n  return updateConfigPath\n}\n\nexport async function validateDownload(updater: AppUpdater, expectDownloadPromise = true) {\n  const actualEvents = trackEvents(updater)\n\n  const updateCheckResult = await updater.checkForUpdates()\n  const assets = (updateCheckResult.updateInfo as any).assets\n  if (assets != null) {\n    for (const asset of assets) {\n      delete asset.download_count\n    }\n  }\n\n  expect(updateCheckResult.updateInfo).toMatchSnapshot()\n  if (expectDownloadPromise) {\n    // noinspection JSIgnoredPromiseFromCall\n    expect(updateCheckResult.downloadPromise).toBeDefined()\n    const downloadResult = await updateCheckResult.downloadPromise\n    if (updater instanceof MacUpdater) {\n      expect(downloadResult).toEqual([])\n    }\n    else {\n      await assertThat(path.join((downloadResult)!![0])).isFile()\n    }\n  }\n  else {\n    // noinspection JSIgnoredPromiseFromCall\n    expect(updateCheckResult.downloadPromise).toBeUndefined()\n  }\n\n  expect(actualEvents).toMatchSnapshot()\n  return updateCheckResult\n}\n\nexport class TestNodeHttpExecutor extends NodeHttpExecutor {\n  download(url: string, destination: string, options: DownloadOptions): Promise<string> {\n    const args = [\"download\", \"--url\", url, \"--output\", destination]\n    if (options != null && options.sha512) {\n      args.push(\"--sha512\", options.sha512)\n    }\n    return executeAppBuilder(args)\n      .then(() => destination)\n  }\n}\n\nexport const httpExecutor: TestNodeHttpExecutor = new TestNodeHttpExecutor()\n\nexport async function tuneTestUpdater(updater: AppUpdater, options?: TestOnlyUpdaterOptions) {\n  (updater as any).httpExecutor = httpExecutor;\n  (updater as any)._testOnlyOptions = {\n    platform: \"win32\",\n    ...options,\n  }\n  updater.logger = new NoOpLogger()\n}\n\nexport function trackEvents(updater: AppUpdater) {\n  const actualEvents: Array<string> = []\n  for (const eventName of [\"checking-for-update\", \"update-available\", \"update-downloaded\", \"error\"]) {\n    updater.addListener(eventName, () => {\n      actualEvents.push(eventName)\n    })\n  }\n  return actualEvents\n}"]}