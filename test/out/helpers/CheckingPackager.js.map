{"version":3,"file":"CheckingPackager.js","sourceRoot":"","sources":["../../src/helpers/CheckingPackager.ts"],"names":[],"mappings":";;;;;;AAIA,kFAAyD;AAEzD,iEAA6D;AAG7D,MAAa,mBAAoB,SAAQ,yBAAW;IAGlD,YAAY,IAAc;QACxB,KAAK,CAAC,IAAI,CAAC,CAAA;IACb,CAAC;IAED,mCAAmC;IACnC,KAAK,CAAC,IAAI,CAAC,MAAc,EAAE,IAAU,EAAE,OAAsB,EAAE,WAA6B;QAC1F,YAAY;QACZ,MAAM,WAAW,GAAiC,OAAO,CAAC,mCAAmC,CAAC,CAAC,OAAO,CAAA;QACtG,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,2BAA2B,EAAE,CAAC,CAAA;QAE/F,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAA;IACtD,CAAC;IAED,mCAAmC;IACnC,4BAA4B,CAAC,SAAiB,EAAE,IAAU,EAAE,OAAsB,EAAE,WAA6B;QAC/G,OAAO;IACT,CAAC;CACF;AApBD,kDAoBC;AAED,MAAa,mBAAoB,SAAQ,qBAAW;IAIlD,YAAY,IAAc;QACxB,KAAK,CAAC,IAAI,CAAC,CAAA;QAHb,yBAAoB,GAA0B,IAAI,CAAA;IAIlD,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,MAAc,EAAE,IAAU,EAAE,OAAsB,EAAE,WAA6B;QAC1F,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,6CAA6C;YAC7C,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;gBACzB,IAAI,CAAC,oBAAoB,GAAG,MAAO,MAAoB,CAAC,iBAAiB,EAAE,CAAA;gBAC3E,MAAK;aACN;SACF;QACD,0EAA0E;QAC1E,OAAO,MAAM,qBAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC,CAAA;IACxF,CAAC;IAED,mCAAmC;IACnC,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,SAAiB,EAAE,YAAoB,EAAE,IAAU,EAAE,kBAAoC,EAAE,OAAsB;QAC5I,OAAO;IACT,CAAC;IAED,oCAAoC;IACpC,KAAK,CAAC,MAAM,CAAC,IAAoB;QAC/B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;IAClC,CAAC;IAED,yDAAyD;IACzD,KAAK,CAAC,MAAM,CAAC,OAAe,EAAE,OAAe,EAAE,QAAkB,EAAE,QAAwB;QACzF,OAAO;IACT,CAAC;IAED,yDAAyD;IACzD,4BAA4B,CAAC,SAAiB,EAAE,IAAU,EAAE,OAAsB,EAAE,WAA6B;QAC/G,OAAO;IACT,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,SAAiB,EAAE,MAAc;QAC/D,UAAU;IACZ,CAAC;CACF;AA3CD,kDA2CC","sourcesContent":["import { AsyncTaskManager } from \"builder-util\"\nimport { Arch, MacConfiguration, Packager, Target } from \"electron-builder\"\nimport SquirrelWindowsTarget from \"electron-builder-squirrel-windows\"\nimport { Identity } from \"app-builder-lib/out/codeSign/macCodeSign\"\nimport MacPackager from \"app-builder-lib/out/macPackager\"\nimport { DmgTarget } from \"dmg-builder\"\nimport { WinPackager } from \"app-builder-lib/out/winPackager\"\nimport { SignOptions as MacSignOptions } from \"app-builder-lib/electron-osx-sign\"\n\nexport class CheckingWinPackager extends WinPackager {\n  effectiveDistOptions: any\n\n  constructor(info: Packager) {\n    super(info)\n  }\n\n  //noinspection JSUnusedLocalSymbols\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    // skip pack\n    const helperClass: typeof SquirrelWindowsTarget = require(\"electron-builder-squirrel-windows\").default\n    this.effectiveDistOptions = await (new helperClass(this, outDir).computeEffectiveDistOptions())\n\n    await this.sign(this.computeAppOutDir(outDir, arch))\n  }\n\n  //noinspection JSUnusedLocalSymbols\n  packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): void {\n    // skip\n  }\n}\n\nexport class CheckingMacPackager extends MacPackager {\n  effectiveDistOptions: any\n  effectiveSignOptions: MacSignOptions | null = null\n\n  constructor(info: Packager) {\n    super(info)\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    for (const target of targets) {\n      // do not use instanceof to avoid dmg require\n      if (target.name === \"dmg\") {\n        this.effectiveDistOptions = await (target as DmgTarget).computeDmgOptions()\n        break\n      }\n    }\n    // http://madole.xyz/babel-plugin-transform-async-to-module-method-gotcha/\n    return await MacPackager.prototype.pack.call(this, outDir, arch, targets, taskManager)\n  }\n\n  //noinspection JSUnusedLocalSymbols\n  async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, customBuildOptions: MacConfiguration, targets: Array<Target>) {\n    // skip\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async doSign(opts: MacSignOptions): Promise<any> {\n    this.effectiveSignOptions = opts\n  }\n\n  //noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\n  async doFlat(appPath: string, outFile: string, identity: Identity, keychain?: string | null): Promise<any> {\n    // skip\n  }\n\n  //noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\n  packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): void {\n    // skip\n  }\n\n  protected async writeUpdateInfo(appOutDir: string, outDir: string) {\n    // ignored\n  }\n}\n"]}