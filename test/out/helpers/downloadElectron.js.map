{"version":3,"file":"downloadElectron.js","sourceRoot":"","sources":["../../src/helpers/downloadElectron.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAsC;AACtC,2CAA4B;AAC5B,2BAAmC;AACnC,6CAAoE;AAEpE,MAAM,iBAAiB,GAAmC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,uBAAuB,CAAC,CAAC,CAAC,iBAAiB,CAAA;AAEvI,KAAK,UAAU,wBAAwB;IAC5C,wCAAwC;IACxC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,cAAI,EAAE;QACjC,OAAM;KACP;IAED,MAAM,QAAQ,GAAG,gCAAmB,EAAE,CAAA;IACtC,IAAI,KAAoB,CAAA;IACxB,IAAI;QACF,KAAK,GAAG,MAAM,aAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;KACnC;IACD,OAAO,CAAC,EAAE;QACR,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;YACvB,OAAM;SACP;aACI;YACH,MAAM,CAAC,CAAA;SACR;KACF;IACD,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACxC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,6BAAgB,CAAC,EAAE;YAC7D,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,EAAE,CAAC,CAAA;YAC1C,OAAO,aAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAA;SAC5C;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9B,CAAC,CAAC,CAAC,CAAA;AACL,CAAC;AA1BD,4DA0BC;AAED,SAAgB,mCAAmC;IACjD,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;IACzF,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACjC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACtB;IAED,MAAM,QAAQ,GAAe,EAAE,CAAA;IAC/B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,MAAM,KAAK,GAAG,CAAC,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,iCAAiC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAA;QAClN,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,QAAQ,CAAC,IAAI,CAAC;gBACZ,OAAO,EAAE,6BAAgB;gBACzB,IAAI;gBACJ,QAAQ;aACT,CAAC,CAAA;SACH;KACF;IACD,OAAO,iBAAiB,CAAC,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC9F,CAAC;AAlBD,kFAkBC;AAED,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;IAC3B,mCAAmC,EAAE;SAClC,KAAK,CAAC,KAAK,CAAC,EAAE;QACb,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;QAChD,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAA;IACvB,CAAC,CAAC,CAAA;CACL","sourcesContent":["import { isCI as isCi } from \"ci-info\"\nimport * as path from \"path\"\nimport { promises as fs } from \"fs\"\nimport { ELECTRON_VERSION, getElectronCacheDir } from \"./testConfig\"\n\nconst executeAppBuilder: (options: any) => Promise<any> = require(path.join(__dirname, \"../../..\", \"packages/builder-util\")).executeAppBuilder\n\nexport async function deleteOldElectronVersion(): Promise<any> {\n  // on CircleCi no need to clean manually\n  if (process.env.CIRCLECI || !isCi) {\n    return\n  }\n\n  const cacheDir = getElectronCacheDir()\n  let files: Array<string>\n  try {\n    files = await fs.readdir(cacheDir)\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      return\n    }\n    else {\n      throw e\n    }\n  }\n  return await Promise.all(files.map(file => {\n    if (file.endsWith(\".zip\") && !file.includes(ELECTRON_VERSION)) {\n      console.log(`Remove old electron ${file}`)\n      return fs.unlink(path.join(cacheDir, file))\n    }\n    return Promise.resolve(null)\n  }))\n}\n\nexport function downloadAllRequiredElectronVersions(): Promise<any> {\n  const platforms = process.platform === \"win32\" ? [\"win32\"] : [\"darwin\", \"linux\", \"win32\"]\n  if (process.platform === \"darwin\") {\n    platforms.push(\"mas\")\n  }\n\n  const versions: Array<any> = []\n  for (const platform of platforms) {\n    const archs = (platform === \"mas\" || platform === \"darwin\") ? [\"x64\"] : (platform === \"win32\" ? [\"ia32\", \"x64\"] : require(`${path.join(__dirname, \"../../..\")}/packages/builder-util/out/util`).getArchCliNames())\n    for (const arch of archs) {\n      versions.push({\n        version: ELECTRON_VERSION,\n        arch,\n        platform,\n      })\n    }\n  }\n  return executeAppBuilder([\"download-electron\", \"--configuration\", JSON.stringify(versions)])\n}\n\nif (require.main === module) {\n  downloadAllRequiredElectronVersions()\n    .catch(error => {\n      console.error((error.stack || error).toString())\n      process.exitCode = -1\n    })\n}"]}