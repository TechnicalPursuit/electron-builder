{"version":3,"file":"fileAssert.js","sourceRoot":"","sources":["../../src/helpers/fileAssert.ts"],"names":[],"mappings":"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","sourcesContent":["import { exists, statOrNull } from \"builder-util/out/fs\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\n\n// http://joel-costigliola.github.io/assertj/\nexport function assertThat(actual: any): Assertions {\n  return new Assertions(actual)\n}\n\nconst appVersion = require(path.join(__dirname, \"../../../packages/app-builder-lib/package.json\")).version\n\nclass Assertions {\n  constructor(private actual: any) {\n  }\n\n  containsAll<T>(expected: Iterable<T>) {\n    expect(this.actual.slice().sort()).toEqual(Array.from(expected).slice().sort())\n  }\n\n  isAbsolute() {\n    if (!path.isAbsolute(this.actual)) {\n      throw new Error(`Path ${this.actual} is not absolute`)\n    }\n  }\n\n  async isFile() {\n    const info = await statOrNull(this.actual)\n    if (info == null) {\n      throw new Error(`Path ${this.actual} doesn't exist`)\n    }\n    if (!info.isFile()) {\n      throw new Error(`Path ${this.actual} is not a file`)\n    }\n  }\n\n  async isSymbolicLink() {\n    const info = await fs.lstat(this.actual)\n    if (!info.isSymbolicLink()) {\n      throw new Error(`Path ${this.actual} is not a symlink`)\n    }\n  }\n\n  async isDirectory() {\n    const file = this.actual\n    const info = await statOrNull(file)\n    if (info == null) {\n      throw new Error(`Path ${file} doesn't exist`)\n    }\n    if (!info.isDirectory()) {\n      throw new Error(`Path ${file} is not a directory`)\n    }\n  }\n\n  async doesNotExist() {\n    if (await exists(this.actual)) {\n      throw new Error(`Path ${this.actual} must not exist`)\n    }\n  }\n\n  async throws(customErrorAssert?: (error: Error) => void) {\n    let actualError: Error | null = null\n    let result: any\n    try {\n      result = await this.actual\n    }\n    catch (e) {\n      actualError = e\n    }\n\n    let m\n    if (actualError == null) {\n      m = result\n    }\n    else {\n      m = (actualError as NodeJS.ErrnoException).code || actualError.message\n\n      if (m.includes(\"HttpError: \") && m.indexOf(\"\\n\") > 0) {\n        m = m.substring(0, m.indexOf(\"\\n\"))\n      }\n\n      if (m.startsWith(\"Cannot find specified resource\")) {\n        m = m.substring(0, m.indexOf(\",\"))\n      }\n\n      m = m.replace(appVersion, \"<appVersion>\")\n      m = m.replace(/\\((C:)?([\\/\\\\])[^(]+([\\/\\\\])([^(\\/\\\\]+)\\)/g, `(<path>/$4)`)\n      m = m.replace(/\"(C:)?([\\/\\\\])[^\"]+([\\/\\\\])([^\"\\/\\\\]+)\"/g, `\"<path>/$4\"`)\n      m = m.replace(/'(C:)?([\\/\\\\])[^']+([\\/\\\\])([^'\\/\\\\]+)'/g, `'<path>/$4'`)\n    }\n    try {\n      if (customErrorAssert == null) {\n        expect(m).toMatchSnapshot()\n      }\n      else {\n        customErrorAssert(actualError!!)\n      }\n    }\n    catch (matchError) {\n      throw new Error(matchError + \" \" + actualError)\n    }\n  }\n}"]}