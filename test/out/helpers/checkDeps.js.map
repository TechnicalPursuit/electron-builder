{"version":3,"file":"checkDeps.js","sourceRoot":"","sources":["../../src/helpers/checkDeps.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from \"chalk\"\nimport depCheck, { Results } from \"depcheck\"\nimport { readJson } from \"fs-extra\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { printErrorAndExit } from \"builder-util/out/promise\"\n\nconst knownUnusedDevDependencies = new Set<string>([\n])\n\nconst knownMissedDependencies = new Set<string>([\n  \"babel-core\",\n  \"babel-preset-env\",\n  \"babel-preset-stage-0\",\n  \"babel-preset-react\",\n])\n\nconst rootDir = path.join(__dirname, \"../../..\")\nconst packageDir = path.join(rootDir, \"packages\")\n\nasync function check(projectDir: string, devPackageData: any): Promise<boolean> {\n  const packageName = path.basename(projectDir)\n  // console.log(`Checking ${projectDir}`)\n\n  const result = await new Promise<Results>(resolve => {\n    depCheck(projectDir, {\n      ignoreDirs: [\n        \"src\", \"test\", \"docs\", \"typings\", \"docker\", \"certs\", \"templates\", \"vendor\",\n      ],\n      // ignore d.ts\n      parsers: {\n        \"*.js\": (depCheck as any).parser.es6,\n      },\n    }, resolve)\n  })\n\n  let unusedDependencies: any\n  if (packageName === \"electron-builder\") {\n    unusedDependencies = result.dependencies.filter(it => it !== \"dmg-builder\" && it !== \"bluebird-lst\" && it !== \"@types/yargs\")\n  }\n  else {\n    unusedDependencies = result.dependencies.filter(it => it !== \"bluebird-lst\" && it !== \"@types/debug\" && it !== \"@types/semver\" && it !== \"@types/fs-extra\")\n  }\n\n  if (unusedDependencies.length > 0) {\n    console.error(`${chalk.bold(packageName)} Unused dependencies: ${JSON.stringify(unusedDependencies, null, 2)}`)\n    return false\n  }\n\n  let unusedDevDependencies = result.devDependencies.filter(it => !it.startsWith(\"@types/\") && !knownUnusedDevDependencies.has(it))\n  if (packageName === \"dmg-builder\") {\n    unusedDevDependencies = unusedDevDependencies.filter(it => it !== \"temp-file\")\n  }\n  if (unusedDevDependencies.length > 0) {\n    console.error(`${chalk.bold(packageName)} Unused devDependencies: ${JSON.stringify(unusedDevDependencies, null, 2)}`)\n    return false\n  }\n\n  delete (result.missing as any).electron\n  const toml = (result.missing as any).toml\n  if (toml != null && toml.length === 1 && toml[0].endsWith(\"config.js\")) {\n    delete (result.missing as any).toml\n  }\n\n  for (const name of Object.keys(result.missing)) {\n    if (name === \"electron-builder-squirrel-windows\" || name === \"electron-webpack\" ||\n      (packageName === \"app-builder-lib\" && (name === \"dmg-builder\" || knownMissedDependencies.has(name) || name.startsWith(\"@babel/\"))) ||\n      (packageName === \"app-builder-lib\" && (name === \"dmg-builder\" || knownMissedDependencies.has(name) || name.startsWith(\"@babel/\")))) {\n      delete (result.missing as any)[name]\n    }\n  }\n\n  if (Object.keys(result.missing).length > 0) {\n    console.error(`${chalk.bold(packageName)} Missing dependencies: ${JSON.stringify(result.missing, null, 2)}`)\n    return false\n  }\n\n  const packageData = await readJson(path.join(projectDir, \"package.json\"))\n  for (const name of (devPackageData.devDependencies == null ? [] : Object.keys(devPackageData.devDependencies))) {\n    if (packageData.dependencies != null && packageData.dependencies[name] != null) {\n      continue\n    }\n\n    const usages = result.using[name]\n    if (usages == null || usages.length === 0) {\n      continue\n    }\n\n    for (const file of usages) {\n      if (file.startsWith(path.join(projectDir, \"src\") + path.sep)) {\n        console.error(`${chalk.bold(packageName)} Dev dependency ${name} is used in the sources`)\n        return false\n      }\n    }\n  }\n\n  return true\n}\n\nasync function main(): Promise<void> {\n  const packages = (await fs.readdir(packageDir)).filter(it => !it.includes(\".\")).sort()\n  const devPackageData = await readJson(path.join(rootDir, \"package.json\"))\n  if ((await Promise.all(packages.map(it => check(path.join(packageDir, it), devPackageData)))).includes(false)) {\n    process.exitCode = 1\n  }\n}\n\nmain()\n  .catch(printErrorAndExit)"]}