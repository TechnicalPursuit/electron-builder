{"version":3,"file":"ArtifactPublisherTest.js","sourceRoot":"","sources":["../src/ArtifactPublisherTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, copyFile, TmpDir } from \"builder-util\"\nimport { CancellationToken, HttpError, S3Options, SpacesOptions } from \"builder-util-runtime\"\nimport { createPublisher } from \"app-builder-lib/out/publish/PublishManager\"\nimport { PublishContext } from \"electron-publish\"\nimport { BintrayPublisher } from \"app-builder-lib/out/publish/BintrayPublisher\"\nimport { GitHubPublisher } from \"electron-publish/out/gitHubPublisher\"\nimport { isCI as isCi } from \"ci-info\"\nimport * as path from \"path\"\n\nif (isCi && process.platform === \"win32\") {\n  fit(\"Skip ArtifactPublisherTest suite on Windows CI\", () => {\n    console.warn(\"[SKIP] Skip ArtifactPublisherTest suite on Windows CI\")\n  })\n}\n\nif (process.env.ELECTRON_BUILDER_OFFLINE === \"true\") {\n  fit(\"Skip ArtifactPublisherTest suite — ELECTRON_BUILDER_OFFLINE is defined\", () => {\n    console.warn(\"[SKIP] Skip ArtifactPublisherTest suite — ELECTRON_BUILDER_OFFLINE is defined\")\n  })\n}\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nfunction versionNumber() {\n  return `${getRandomInt(0, 99)}.${getRandomInt(0, 99)}.${getRandomInt(0, 99)}`\n}\n\n//noinspection SpellCheckingInspection\nconst token = Buffer.from(\"Y2Y5NDdhZDJhYzJlMzg1OGNiNzQzYzcwOWZhNGI0OTk2NWQ4ZDg3Yg==\", \"base64\").toString()\nconst iconPath = path.join(__dirname, \"..\", \"fixtures\", \"test-app\", \"build\", \"icon.icns\")\n\nconst publishContext: PublishContext = {\n  cancellationToken: new CancellationToken(),\n  progress: null,\n}\n\ntest(\"GitHub unauthorized\", async () => {\n  try {\n    await new GitHubPublisher(publishContext, {provider: \"github\", owner: \"actperepo\", repo: \"ecb2\", token: \"incorrect token\"}, versionNumber())._release.value\n  }\n  catch (e) {\n    expect(e.message).toMatch(/(Bad credentials|Unauthorized|API rate limit exceeded)/)\n    return\n  }\n\n  throw new Error(\"must be error\")\n})\n\nfunction isApiRateError(e: Error): boolean {\n  if (e.name === \"HttpError\") {\n    const description = (e as HttpError).description\n    return description.message != null && description.message.includes(\"API rate limit exceeded\")\n  }\n  else {\n    return false\n  }\n}\n\nfunction testAndIgnoreApiRate(name: string, testFunction: () => Promise<any>) {\n  test.skip(name, async () => {\n    try {\n      await testFunction()\n    }\n    catch (e) {\n      if (isApiRateError(e)) {\n        console.warn(e.description.message)\n      }\n      else {\n        throw e\n      }\n    }\n  })\n}\n\ntest(\"Bintray upload\", async () => {\n  const version = \"42.0.0\"\n  const tmpDir = new TmpDir(\"artifact-publisher-test\")\n  const artifactPath = await tmpDir.getTempFile({suffix: \" test-space.icns\"})\n  await copyFile(iconPath, artifactPath)\n\n  //noinspection SpellCheckingInspection\n  const publisher = new BintrayPublisher(publishContext, {provider: \"bintray\", owner: \"actperepo\", package: \"test\", repo: \"generic\", token: \"5df2cadec86dff91392e4c419540785813c3db15\"}, version)\n  try {\n    // force delete old version to ensure that test doesn't depend on previous runs\n    await publisher.deleteRelease(true)\n    await publisher.upload({file: artifactPath, arch: Arch.x64})\n    await publisher.upload({file: artifactPath, arch: Arch.x64})\n  }\n  finally {\n    try {\n      await publisher.deleteRelease(false)\n    }\n    finally {\n      await tmpDir.cleanup()\n    }\n  }\n})\n\ntestAndIgnoreApiRate(\"GitHub upload\", async () => {\n  const publisher = new GitHubPublisher(publishContext, {provider: \"github\", owner: \"actperepo\", repo: \"ecb2\", token}, versionNumber())\n  try {\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n    // test overwrite\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\nif (process.env.AWS_ACCESS_KEY_ID != null && process.env.AWS_SECRET_ACCESS_KEY != null) {\n  test(\"S3 upload\", async () => {\n    const publisher = createPublisher(publishContext, \"0.0.1\", {provider: \"s3\", bucket: \"electron-builder-test\"} as S3Options, {}, {} as any)!!\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n    // test overwrite\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n  })\n}\n\nif (process.env.DO_KEY_ID != null && process.env.DO_SECRET_KEY != null) {\n  test(\"DO upload\", async () => {\n    const configuration: SpacesOptions = {\n      provider: \"spaces\",\n      name: \"electron-builder-test\",\n      region: \"nyc3\",\n    }\n    const publisher = createPublisher(publishContext, \"0.0.1\", configuration, {}, {} as any)!!\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n    // test overwrite\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n  })\n}\n\ntestAndIgnoreApiRate(\"prerelease\", async () => {\n  const publisher = new GitHubPublisher(publishContext, {provider: \"github\", owner: \"actperepo\", repo: \"ecb2\", token, releaseType: \"prerelease\"}, versionNumber())\n  try {\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n    const r = await publisher.getRelease()\n    expect(r).toMatchObject({\n      prerelease: true,\n      draft: false,\n    })\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\ntestAndIgnoreApiRate(\"GitHub upload org\", async () => {\n  //noinspection SpellCheckingInspection\n  const publisher = new GitHubPublisher(publishContext, {provider: \"github\", owner: \"builder-gh-test\", repo: \"darpa\", token}, versionNumber())\n  try {\n    await publisher.upload({file: iconPath, arch: Arch.x64})\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})"]}