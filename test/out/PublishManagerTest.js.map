{"version":3,"file":"PublishManagerTest.js","sourceRoot":"","sources":["../src/PublishManagerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { createTargets, Platform } from \"electron-builder\"\nimport { outputFile } from \"fs-extra\"\nimport * as path from \"path\"\nimport { GithubOptions, GenericServerOptions, SpacesOptions } from \"builder-util-runtime\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { app, checkDirContents } from \"./helpers/packTester\"\n\ntest.ifNotWindows.ifDevOrLinuxCi(\"generic, github and spaces\", app({\n  targets: Platform.MAC.createTarget(\"zip\"),\n  config: {\n    generateUpdatesFilesForAllChannels: true,\n    mac: {\n      electronUpdaterCompatibility: \">=2.16\",\n    },\n    publish: [\n      genericPublisher(\"https://example.com/downloads\"),\n      githubPublisher(\"foo/foo\"),\n      spacesPublisher(),\n    ]\n  },\n}))\n\nfunction spacesPublisher(publishAutoUpdate: boolean = true): SpacesOptions {\n  return {\n    provider: \"spaces\",\n    name: \"mySpaceName\",\n    region: \"nyc3\",\n    publishAutoUpdate,\n  }\n}\n\nfunction githubPublisher(repo: string): GithubOptions {\n  return {\n    provider: \"github\",\n    repo,\n  }\n}\n\nfunction genericPublisher(url: string): GenericServerOptions {\n  return {\n    provider: \"generic\",\n    url,\n  }\n}\n\ntest.ifNotWindows.ifDevOrLinuxCi(\"github and spaces (publishAutoUpdate)\", app({\n  targets: Platform.LINUX.createTarget(\"AppImage\"),\n  config: {\n    mac: {\n      electronUpdaterCompatibility: \">=2.16\",\n    },\n    publish: [\n      githubPublisher(\"foo/foo\"),\n      spacesPublisher(false),\n    ]\n  },\n}))\n\ntest.ifAll(\"mac artifactName \", app({\n  targets: Platform.MAC.createTarget(\"zip\"),\n  config: {\n    // tslint:disable-next-line:no-invalid-template-strings\n    artifactName: \"${productName}_${version}_${os}.${ext}\",\n    mac: {\n      electronUpdaterCompatibility: \">=2.16\",\n    },\n    publish: [\n      spacesPublisher(),\n    ]\n  },\n}, {\n  publish: undefined,\n}))\n\n// otherwise test \"os macro\" always failed for pull requests\nprocess.env.PUBLISH_FOR_PULL_REQUEST = \"true\"\n\ntest.ifAll.ifNotWindows(\"os macro\", app({\n  targets: createTargets([Platform.LINUX, Platform.MAC], \"zip\"),\n  config: {\n    publish: {\n      provider: \"s3\",\n      bucket: \"my bucket\",\n      // tslint:disable-next-line:no-invalid-template-strings\n      path: \"${channel}/${os}\"\n    },\n  },\n}, {\n  publish: \"always\",\n  projectDirCreated: async projectDir => {\n    process.env.__TEST_S3_PUBLISHER__ = path.join(projectDir, \"dist/s3\")\n  },\n  packed: async context => {\n    const dir = path.join(context.projectDir, \"dist/s3\")\n    await assertThat(dir).isDirectory()\n    await checkDirContents(dir)\n  }\n}))\n\n// disable on ifNotCi for now - slow on CircleCI\n// error should be ignored because publish: never\n// https://github.com/electron-userland/electron-builder/issues/2670\ntest.ifAll.ifNotCi(\"dotted s3 bucket\", app({\n  targets: createTargets([Platform.LINUX], \"zip\"),\n  config: {\n    publish: {\n      provider: \"s3\",\n      bucket: \"bucket.dotted.name\",\n    },\n  },\n}, {\n  publish: \"never\"\n}))\n\n// https://github.com/electron-userland/electron-builder/issues/3261\ntest.ifAll.ifNotWindows(\"custom provider\", app({\n  targets: createTargets([Platform.LINUX], \"zip\"),\n  config: {\n    publish: {\n      provider: \"custom\",\n      boo: \"foo\",\n    },\n  },\n}, {\n  publish: \"never\",\n  projectDirCreated: projectDir => outputFile(path.join(projectDir, \"build/electron-publisher-custom.js\"), `class Publisher {\n    async upload(task) {\n    }\n  }\n  \n  module.exports = Publisher`)\n}))"]}