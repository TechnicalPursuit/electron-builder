{"version":3,"file":"mainEntryTest.js","sourceRoot":"","sources":["../src/mainEntryTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { createTargets, DIR_TARGET, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { appTwoThrows, assertPack, modifyPackageJson } from \"./helpers/packTester\"\n\nconst packagerOptions = {\n  targets: createTargets([Platform.LINUX, Platform.MAC], DIR_TARGET)\n}\n\ntest.ifLinuxOrDevMac(\"invalid main in the app package.json\", appTwoThrows(packagerOptions, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.main = \"main.js\"\n  }, true)\n}))\n\ntest.ifLinuxOrDevMac(\"invalid main in the app package.json (no asar)\", appTwoThrows(packagerOptions, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))\n\ntest.ifLinuxOrDevMac(\"invalid main in the app package.json (custom asar)\", appTwoThrows(packagerOptions, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"path/app.asar/main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))\n\ntest.ifLinuxOrDevMac(\"main in the app package.json (no asar)\", () => assertPack(\"test-app\", packagerOptions, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      fs.rename(path.join(projectDir, \"app\", \"index.js\"), path.join(projectDir, \"app\", \"main.js\")),\n      modifyPackageJson(projectDir, data => {\n        data.main = \"main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))\n\ntest.ifLinuxOrDevMac(\"main in the app package.json (custom asar)\", () => assertPack(\"test-app\", packagerOptions, {\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"path/app.asar/index.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))"]}