{"version":3,"file":"winPackagerTest.js","sourceRoot":"","sources":["../../src/windows/winPackagerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform, DIR_TARGET } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { CheckingWinPackager } from \"../helpers/CheckingPackager\"\nimport { app, appThrows, assertPack, platform } from \"../helpers/packTester\"\nimport { remove } from \"fs-extra\"\n\ntest.ifWinCi(\"beta version\", app({\n  targets: Platform.WINDOWS.createTarget([\"squirrel\", \"nsis\"]),\n  config: {\n    extraMetadata: {\n      version: \"3.0.0-beta.2\",\n    },\n  }\n}))\n\ntest.ifNotCiMac(\"win zip\", app({\n  targets: Platform.WINDOWS.createTarget([\"zip\"]),\n}))\n\ntest.ifNotCiMac.ifAll(\"zip artifactName\", app({\n  linux: [\"appimage\"],\n  win: [\"zip\"],\n  config: {\n    //tslint:disable-next-line:no-invalid-template-strings\n    artifactName: \"${productName}-${version}-${os}-${arch}.${ext}\",\n  },\n}))\n\ntest.ifNotCiMac(\"icon < 256\", appThrows(platform(Platform.WINDOWS), {\n  projectDirCreated: projectDir => fs.rename(path.join(projectDir, \"build\", \"incorrect.ico\"), path.join(projectDir, \"build\", \"icon.ico\"))\n}))\n\ntest.ifNotCiMac(\"icon not an image\", appThrows(platform(Platform.WINDOWS), {\n  projectDirCreated: async projectDir => {\n    const file = path.join(projectDir, \"build\", \"icon.ico\")\n    // because we use hardlinks\n    await fs.unlink(file)\n    await fs.writeFile(file, \"foo\")\n  }\n}))\n\ntest.ifMac(\"custom icon\", () => {\n  let platformPackager: CheckingWinPackager | null = null\n  return assertPack(\"test-app-one\", {\n    targets: Platform.WINDOWS.createTarget(\"squirrel\"),\n    platformPackagerFactory: packager => platformPackager = new CheckingWinPackager(packager),\n    config: {\n      win: {\n        icon: \"customIcon\",\n      },\n    },\n  }, {\n    projectDirCreated: projectDir => fs.rename(path.join(projectDir, \"build\", \"icon.ico\"), path.join(projectDir, \"customIcon.ico\")),\n    packed: async context => {\n      expect(await platformPackager!!.getIconPath()).toEqual(path.join(context.projectDir, \"customIcon.ico\"))\n    },\n  })\n})\n\ntest.ifAll(\"win icon from icns\", () => {\n  let platformPackager: CheckingWinPackager | null = null\n  return app({\n    targets: Platform.WINDOWS.createTarget(DIR_TARGET),\n    config: {\n      mac: {\n        icon: \"icons/icon.icns\",\n      },\n    },\n    platformPackagerFactory: packager => platformPackager = new CheckingWinPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n      remove(path.join(projectDir, \"build\", \"icons\")),\n    ]),\n    packed: async () => {\n      const file = await platformPackager!!.getIconPath()\n      expect(file).toBeDefined()\n    },\n  })()\n})"]}