{"version":3,"file":"winCodeSignTest.js","sourceRoot":"","sources":["../../src/windows/winCodeSignTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIR_TARGET, Platform } from \"electron-builder\"\nimport { outputFile } from \"fs-extra\"\nimport * as path from \"path\"\nimport { CheckingWinPackager } from \"../helpers/CheckingPackager\"\nimport { app, appThrows } from \"../helpers/packTester\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { safeLoad } from \"js-yaml\"\n\ntest(\"parseDn\", () => {\n  expect(parseDn(\"CN=7digital Limited, O=7digital Limited, L=London, C=GB\")).toMatchSnapshot()\n\n  expect(safeLoad(\"publisherName:\\n  - 7digital Limited\")).toMatchObject({publisherName: [\"7digital Limited\"]})\n})\n\nconst windowsDirTarget = Platform.WINDOWS.createTarget([\"dir\"])\n\ntest(\"sign nested asar unpacked executables\", appThrows({\n  targets: Platform.WINDOWS.createTarget(DIR_TARGET),\n  config: {\n    publish: \"never\",\n    asarUnpack: [\"assets\"],\n  }\n}, {\n  signedWin: true,\n  projectDirCreated: async projectDir => {\n    await outputFile(path.join(projectDir, \"assets\", \"nested\", \"nested\", \"file.exe\"), \"invalid PE file\")\n  },\n}, error => expect(error.message).toContain(\"Unrecognized file type\")))\n\nfunction testCustomSign(sign: any) {\n  return app({\n    targets: Platform.WINDOWS.createTarget(DIR_TARGET),\n    platformPackagerFactory: (packager, platform) => new CheckingWinPackager(packager),\n    config: {\n      win: {\n        certificatePassword: \"pass\",\n        certificateFile: \"secretFile\",\n        sign,\n        signingHashAlgorithms: [\"sha256\"],\n        // to be sure that sign code will be executed\n        forceCodeSigning: true,\n      }\n    },\n  })\n}\n\ntest.ifAll.ifNotCiMac(\"certificateFile/password - sign as function\", testCustomSign(require(\"../helpers/customWindowsSign\").default))\ntest.ifAll.ifNotCiMac(\"certificateFile/password - sign as path\", testCustomSign(path.join(__dirname, \"../helpers/customWindowsSign\")))\n\ntest.ifAll.ifNotCiMac(\"custom sign if no code sign info\", () => {\n  let called = false\n  return app({\n    targets: Platform.WINDOWS.createTarget(DIR_TARGET),\n    platformPackagerFactory: (packager, platform) => new CheckingWinPackager(packager),\n    config: {\n      win: {\n        // to be sure that sign code will be executed\n        forceCodeSigning: true,\n        sign: async () => {\n          called = true\n        },\n      },\n    },\n  }, {\n    packed: async () => {\n      expect(called).toBe(true)\n    }\n  })()\n})\n\ntest.ifAll.ifNotCiMac(\"forceCodeSigning\", appThrows({\n  targets: windowsDirTarget,\n  config: {\n    forceCodeSigning: true,\n  }\n}))\n\ntest.ifAll.ifNotCiMac(\"electronDist\", appThrows({\n  targets: Platform.WINDOWS.createTarget(DIR_TARGET),\n  config: {\n    electronDist: \"foo\",\n  }\n}))\n"]}