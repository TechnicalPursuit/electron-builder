{"version":3,"file":"squirrelWindowsTest.js","sourceRoot":"","sources":["../../src/windows/squirrelWindowsTest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,uDAAiD;AACjD,2CAA4B;AAC5B,kEAAiE;AACjE,sDAAsE;AAEtE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,kBAAkB,EAAE,gBAAG,CAAC;IAC5C,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,CAAC;IACpD,MAAM,EAAE;QACN,GAAG,EAAE;YACH,WAAW,EAAE,QAAQ;SACtB;KACF;CACF,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC,CAAA;AAEtB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,EAAE,gBAAG,CAAC;IACxC,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC3D,MAAM,EAAE;QACN,GAAG,EAAE;YACH,6CAA6C;YAC7C,YAAY,EAAE,yBAAyB;SACxC;KACF;CACF,CAAC,CAAC,CAAA;AAEH,YAAY;AACZ,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,gBAAG,CAAC;IAC7B,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,uBAAI,CAAC,IAAI,CAAC;IAC7D,MAAM,EAAE;QACN,eAAe,EAAE;YACf,cAAc,EAAE,gDAAgD;YAChE,GAAG,EAAE,IAAI;SACV;KACF;CACF,CAAC,CAAC,CAAA;AAEH,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACxC,IAAI,gBAAgB,GAA+B,IAAI,CAAA;IACvD,IAAI,cAAc,GAAkB,IAAI,CAAA;IAExC,OAAO,uBAAU,CAAC,cAAc,EAAE;QAChC,OAAO,EAAE,2BAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC;QAClD,uBAAuB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,gBAAgB,GAAG,IAAI,sCAAmB,CAAC,QAAQ,CAAC;KACtG,EAAE;QACD,iBAAiB,EAAE,EAAE,CAAC,EAAE;YACtB,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAA;YAC9D,OAAO,0BAAa,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAA;QAC7D,CAAC;QACD,MAAM,EAAE,KAAK,IAAI,EAAE;YACjB,MAAM,CAAC,gBAAkB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;QACpF,CAAC;KACF,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { Arch, Platform } from \"electron-builder\"\nimport * as path from \"path\"\nimport { CheckingWinPackager } from \"../helpers/CheckingPackager\"\nimport { app, assertPack, copyTestAsset } from \"../helpers/packTester\"\n\ntest.ifAll.ifNotCiMac(\"Squirrel.Windows\", app({\n  targets: Platform.WINDOWS.createTarget([\"squirrel\"]),\n  config: {\n    win: {\n      compression: \"normal\",\n    }\n  }\n}, {signedWin: true}))\n\ntest.ifAll.ifNotCiMac(\"artifactName\", app({\n  targets: Platform.WINDOWS.createTarget([\"squirrel\", \"zip\"]),\n  config: {\n    win: {\n      // tslint:disable:no-invalid-template-strings\n      artifactName: \"Test ${name} foo.${ext}\",\n    }\n  }\n}))\n\n// very slow\ntest.skip(\"delta and msi\", app({\n  targets: Platform.WINDOWS.createTarget(\"squirrel\", Arch.ia32),\n  config: {\n    squirrelWindows: {\n      remoteReleases: \"https://github.com/develar/__test-app-releases\",\n      msi: true,\n    }\n  },\n}))\n\ntest.ifAll(\"detect install-spinner\", () => {\n  let platformPackager: CheckingWinPackager | null = null\n  let loadingGifPath: string | null = null\n\n  return assertPack(\"test-app-one\", {\n    targets: Platform.WINDOWS.createTarget(\"squirrel\"),\n    platformPackagerFactory: (packager, platform) => platformPackager = new CheckingWinPackager(packager),\n  }, {\n    projectDirCreated: it => {\n      loadingGifPath = path.join(it, \"build\", \"install-spinner.gif\")\n      return copyTestAsset(\"install-spinner.gif\", loadingGifPath)\n    },\n    packed: async () => {\n      expect(platformPackager!!.effectiveDistOptions.loadingGif).toEqual(loadingGifPath)\n    },\n  })\n})"]}