{"version":3,"file":"assistedInstallerTest.js","sourceRoot":"","sources":["../../src/windows/assistedInstallerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, archFromString, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { app, assertPack, copyTestAsset } from \"../helpers/packTester\"\nimport { checkHelpers, doTest, expectUpdateMetadata } from \"../helpers/winHelper\"\n\nconst nsisTarget = Platform.WINDOWS.createTarget([\"nsis\"])\n\ntest.ifNotCiMac(\"assisted\", app({\n  targets: nsisTarget,\n  config: {\n    nsis: {\n      oneClick: false,\n      language: \"1031\",\n    },\n    win: {\n      legalTrademarks: \"My Trademark\"\n    },\n  }\n}, {\n  signedWin: true,\n  projectDirCreated: projectDir => copyTestAsset(\"license.txt\", path.join(projectDir, \"build\", \"license.txt\")),\n}))\n\ntest.ifAll.ifNotCiMac(\"allowElevation false, app requestedExecutionLevel admin\", app({\n  targets: nsisTarget,\n  config: {\n    publish: null,\n    extraMetadata: {\n      // mt.exe doesn't like unicode names from wine\n      name: \"test\",\n      productName: \"test\"\n    },\n    win: {\n      requestedExecutionLevel: \"requireAdministrator\",\n    },\n    nsis: {\n      oneClick: false,\n      allowElevation: false,\n      perMachine: true,\n      displayLanguageSelector: true,\n      installerLanguages: [\"en_US\", \"ru_RU\"],\n      differentialPackage: false,\n    },\n  }\n}))\n\ntest.ifNotCiMac(\"assisted, MUI_HEADER\", () => {\n  let installerHeaderPath: string | null = null\n  return assertPack(\"test-app-one\", {\n      targets: nsisTarget,\n      config: {\n        publish: null,\n        nsis: {\n          oneClick: false,\n          differentialPackage: false,\n        }\n      },\n      effectiveOptionComputed: async it => {\n        const defines = it[0]\n        expect(defines.MUI_HEADERIMAGE).toBeNull()\n        expect(defines.MUI_HEADERIMAGE_BITMAP).toEqual(installerHeaderPath)\n        expect(defines.MUI_HEADERIMAGE_RIGHT).toBeNull()\n        // speedup, do not build - another MUI_HEADER test will test build\n        return true\n      }\n    }, {\n      projectDirCreated: projectDir => {\n        installerHeaderPath = path.join(projectDir, \"build\", \"installerHeader.bmp\")\n        return copyTestAsset(\"installerHeader.bmp\", installerHeaderPath)\n      }\n    }\n  )\n})\n\ntest.ifAll.ifNotCiMac(\"assisted, MUI_HEADER as option\", () => {\n  let installerHeaderPath: string | null = null\n  return assertPack(\"test-app-one\", {\n      targets: Platform.WINDOWS.createTarget([\"nsis\"], Arch.ia32, Arch.x64),\n      config: {\n        publish: null,\n        nsis: {\n          oneClick: false,\n          installerHeader: \"foo.bmp\",\n          differentialPackage: false,\n        }\n      },\n      effectiveOptionComputed: async it => {\n        const defines = it[0]\n        expect(defines.MUI_HEADERIMAGE).toBeNull()\n        expect(defines.MUI_HEADERIMAGE_BITMAP).toEqual(installerHeaderPath)\n        expect(defines.MUI_HEADERIMAGE_RIGHT).toBeNull()\n        // test that we can build such installer\n        return false\n      }\n    }, {\n      projectDirCreated: projectDir => {\n        installerHeaderPath = path.join(projectDir, \"foo.bmp\")\n        return copyTestAsset(\"installerHeader.bmp\", installerHeaderPath)\n      },\n    }\n  )\n})\n\ntest.ifNotCiMac(\"assisted, only perMachine\", app({\n  targets: nsisTarget,\n  config: {\n    nsis: {\n      oneClick: false,\n      perMachine: true,\n    }\n  }\n}))\n\n// test release notes also\ntest.ifAll.ifNotCiMac(\"allowToChangeInstallationDirectory\", app({\n  targets: nsisTarget,\n  config: {\n    extraMetadata: {\n      name: \"test-custom-inst-dir\",\n      productName: \"Test Custom Installation Dir\",\n      repository: \"foo/bar\",\n    },\n    nsis: {\n      allowToChangeInstallationDirectory: true,\n      oneClick: false,\n      multiLanguageInstaller: false,\n    }\n  },\n}, {\n  projectDirCreated: async projectDir => {\n    await fs.writeFile(path.join(projectDir, \"build\", \"release-notes.md\"), \"New release with new bugs and\\n\\nwithout features\")\n    await copyTestAsset(\"license.txt\", path.join(projectDir, \"build\", \"license.txt\"))\n  },\n  packed: async context => {\n    await expectUpdateMetadata(context, archFromString(process.arch))\n    await checkHelpers(context.getResources(Platform.WINDOWS), true)\n    await doTest(context.outDir, false)\n  }\n}))"]}