{"version":3,"file":"ExtraBuildTest.js","sourceRoot":"","sources":["../src/ExtraBuildTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, build, PackagerOptions, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { app, assertPack, linuxDirTarget, modifyPackageJson } from \"./helpers/packTester\"\nimport { getElectronCacheDir } from \"./helpers/testConfig\"\nimport { expectUpdateMetadata } from \"./helpers/winHelper\"\n\nfunction createBuildResourcesTest(packagerOptions: PackagerOptions) {\n  return app({\n    ...packagerOptions,\n    config: {\n      publish: null,\n      directories: {\n        buildResources: \"custom\",\n        // tslint:disable:no-invalid-template-strings\n        output: \"customDist/${channel}\",\n        // https://github.com/electron-userland/electron-builder/issues/601\n        app: \".\",\n      },\n      nsis: {\n        differentialPackage: false,\n      },\n    },\n  }, {\n    packed: async context => {\n      await assertThat(path.join(context.projectDir, \"customDist\", \"latest\")).isDirectory()\n    },\n    projectDirCreated: projectDir => fs.rename(path.join(projectDir, \"build\"), path.join(projectDir, \"custom\"))\n  })\n}\n\ntest.ifAll.ifNotWindows(\"custom buildResources and output dirs: mac\", createBuildResourcesTest({mac: [\"dir\"]}))\ntest.ifAll.ifNotCiMac(\"custom buildResources and output dirs: win\", createBuildResourcesTest({win: [\"nsis\"]}))\ntest.ifAll.ifNotWindows(\"custom buildResources and output dirs: linux\", createBuildResourcesTest({linux: [\"appimage\"]}))\n\ntest.ifAll.ifLinuxOrDevMac(\"prepackaged\", app({\n  targets: linuxDirTarget,\n}, {\n  packed: async context => {\n    await build({\n      prepackaged: path.join(context.outDir, \"linux-unpacked\"),\n      projectDir: context.projectDir,\n      linux: [],\n      config: {\n        // test target\n        linux: {\n          target: {\n            target: \"deb\",\n            arch: \"ia32\",\n          }\n        },\n        compression: \"store\"\n      }\n    })\n    await assertThat(path.join(context.projectDir, \"dist\", \"TestApp_1.1.0_i386.deb\")).isFile()\n  }\n}))\n\ntest.ifAll.ifLinuxOrDevMac(\"retrieve latest electron version\", app({\n  targets: linuxDirTarget,\n}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.devDependencies = {\n      ...data.devDependencies,\n      electron: \"latest\",\n    }\n    delete data.build.electronVersion\n  }),\n}))\n\ntest.ifAll.ifLinuxOrDevMac(\"retrieve latest electron-nightly version\", app({\n  targets: linuxDirTarget,\n}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.devDependencies = {\n      ...data.devDependencies,\n      \"electron-nightly\": \"latest\",\n    }\n    delete data.build.electronVersion\n  }),\n}))\n\ntest.ifAll.ifDevOrLinuxCi(\"override targets in the config\", app({\n  targets: linuxDirTarget,\n}, {\n  packed: async context => {\n    await build({\n      projectDir: context.projectDir,\n      linux: [\"deb\"],\n      config: {\n        publish: null,\n        // https://github.com/electron-userland/electron-builder/issues/1355\n        linux: {\n          target: [\n            \"AppImage\",\n            \"deb\",\n            \"rpm\"\n          ],\n        },\n        compression: \"store\"\n      }\n    })\n  }\n}))\n\n// test https://github.com/electron-userland/electron-builder/issues/1182 also\ntest.ifAll.ifDevOrWinCi(\"override targets in the config - only arch\", app({\n  targets: Platform.WINDOWS.createTarget(null, Arch.ia32),\n  config: {\n    extraMetadata: {\n      version: \"1.0.0-beta.1\",\n    },\n    // https://github.com/electron-userland/electron-builder/issues/1348\n    win: {\n      // tslint:disable:no-invalid-template-strings\n      artifactName: \"${channel}-${name}.exe\",\n      target: [\n        \"nsis\",\n      ],\n    },\n    publish: {\n      provider: \"generic\",\n      url: \"https://develar.s3.amazonaws.com/test\",\n    },\n  },\n}, {\n  packed: context => {\n    return Promise.all([\n      assertThat(path.join(context.projectDir, \"dist\", \"win-unpacked\")).doesNotExist(),\n      assertThat(path.join(context.projectDir, \"dist\", \"latest.yml\")).doesNotExist(),\n      expectUpdateMetadata(context, Arch.ia32),\n    ])\n  },\n}))\n\n// test on all CI to check path separators\ntest.ifAll(\"do not exclude build entirely (respect files)\", () => assertPack(\"test-app-build-sub\", {targets: linuxDirTarget}))\n\ntest.ifNotWindows(\"electronDist as path to local folder with electron builds zipped \", app({\n  targets: linuxDirTarget,\n  config: {\n    electronDist: getElectronCacheDir(),\n  },\n}))\n\nconst overridePublishChannel: any = {\n  channel: \"beta\"\n}\n\ntest.ifAll.ifDevOrLinuxCi(\"overriding the publish channel\", app({\n  targets: linuxDirTarget,\n  config: {\n    publish: overridePublishChannel\n  },\n}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.devDependencies = {}\n    data.build.publish = [\n      {\n        provider: \"s3\",\n        bucket: \"my-s3-bucket\",\n      }\n    ]\n  }),\n  packed: async context => {\n    expect(context.packager.config.publish).toMatchSnapshot()\n  },\n}))"]}