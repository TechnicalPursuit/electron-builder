{"version":3,"file":"filesTest.js","sourceRoot":"","sources":["../src/filesTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIR_TARGET, Platform } from \"electron-builder\"\nimport { TmpDir } from \"builder-util\"\nimport { copyDir } from \"builder-util/out/fs\"\nimport { outputFile } from \"fs-extra\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { Mode, RWX } from \"stat-mode\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { app, appThrows, assertPack, checkDirContents, linuxDirTarget, modifyPackageJson } from \"./helpers/packTester\"\n\ntest.ifDevOrLinuxCi(\"expand not defined env\", appThrows({\n  targets: linuxDirTarget,\n  config: {\n    asar: false,\n    // tslint:disable:no-invalid-template-strings\n    files: [\"${env.FOO_NOT_DEFINED}\"],\n  }\n}))\n\nprocess.env.__NOT_BAR__ = \"!**/bar\"\n\ntest.ifDevOrLinuxCi(\"files\", app({\n  targets: linuxDirTarget,\n  config: {\n    asar: false,\n    // tslint:disable:no-invalid-template-strings\n    files: [\"**/*\", \"!ignoreMe${/*}\", \"${env.__NOT_BAR__}\", \"dist/electron/**/*\"],\n  }\n}, {\n  projectDirCreated: projectDir => Promise.all([\n    outputFile(path.join(projectDir, \"ignoreMe\", \"foo\"), \"data\"),\n    outputFile(path.join(projectDir, \"ignoreEmptyDir\", \"bar\"), \"data\"),\n    outputFile(path.join(projectDir, \"test.h\"), \"test that\"),\n    outputFile(path.join(projectDir, \"dist/electron/foo.js\"), \"data\"),\n  ]),\n  packed: context => {\n    const resources = path.join(context.getResources(Platform.LINUX), \"app\")\n    return checkDirContents(resources)\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"files.from asar\", app({\n  targets: linuxDirTarget,\n  config: {\n    asar: true,\n    files: [\n      {\n        from: \".\",\n        to: \".\",\n        filter: [\"package.json\"]\n      },\n      {\n        from: \"app/node\",\n        to: \"app/node\"\n      },\n    ],\n  },\n}, {\n  projectDirCreated: projectDir => Promise.all([\n    fs.mkdir(path.join(projectDir, \"app/node\"), {recursive: true}).then(() => fs.rename(path.join(projectDir, \"index.js\"), path.join(projectDir, \"app/node/index.js\"))),\n    modifyPackageJson(projectDir, data => {\n      data.main = \"app/node/index.js\"\n    })\n  ]),\n}))\n\ntest.ifDevOrLinuxCi(\"map resources\", app({\n  targets: linuxDirTarget,\n  config: {\n    asar: false,\n    extraResources: [\n      {\n        from: \"foo/old\",\n        to: \"foo/new\",\n      },\n      {\n        from: \"license.txt\",\n        to: \".\",\n      },\n    ],\n  }\n}, {\n  projectDirCreated: projectDir => Promise.all([\n    outputFile(path.join(projectDir, \"foo\", \"old\"), \"data\"),\n    outputFile(path.join(projectDir, \"license.txt\"), \"data\"),\n  ]),\n  packed: context => {\n    const resources = path.join(context.getResources(Platform.LINUX))\n    return Promise.all([\n      assertThat(path.join(resources, \"app\", \"foo\", \"old\")).doesNotExist(),\n      assertThat(path.join(resources, \"foo\", \"new\")).isFile(),\n      assertThat(path.join(resources, \"license.txt\")).isFile(),\n    ])\n  },\n}))\n\nasync function doExtraResourcesTest(platform: Platform) {\n  const osName = platform.buildConfigurationKey\n  //noinspection SpellCheckingInspection\n  await assertPack(\"test-app-one\", {\n    // to check NuGet package\n    targets: platform.createTarget(platform === Platform.WINDOWS ? \"squirrel\" : DIR_TARGET),\n    config: {\n      extraResources: [\n        \"foo\",\n        \"bar/hello.txt\",\n        \"./dir-relative/f.txt\",\n        \"bar/${arch}.txt\",\n        \"${os}/${arch}.txt\",\n      ],\n      [osName]: {\n        extraResources: [\n          \"platformSpecificR\"\n        ],\n        extraFiles: [\n          \"platformSpecificF\"\n        ],\n      }\n    },\n  }, {\n    projectDirCreated: projectDir => {\n      return Promise.all([\n        outputFile(path.join(projectDir, \"foo/nameWithoutDot\"), \"nameWithoutDot\"),\n        outputFile(path.join(projectDir, \"bar/hello.txt\"), \"data\"),\n        outputFile(path.join(projectDir, \"dir-relative/f.txt\"), \"data\"),\n        outputFile(path.join(projectDir, `bar/${process.arch}.txt`), \"data\"),\n        outputFile(path.join(projectDir, `${osName}/${process.arch}.txt`), \"data\"),\n        outputFile(path.join(projectDir, \"platformSpecificR\"), \"platformSpecificR\"),\n        outputFile(path.join(projectDir, \"ignoreMe.txt\"), \"ignoreMe\"),\n      ])\n    },\n    packed: context => {\n      const base = path.join(context.outDir, `${platform.buildConfigurationKey}${platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n      let resourcesDir = path.join(base, \"resources\")\n      if (platform === Platform.MAC) {\n        resourcesDir = path.join(base, `${context.packager.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n      }\n\n      return Promise.all([\n        assertThat(path.join(resourcesDir, \"foo\")).isDirectory(),\n        assertThat(path.join(resourcesDir, \"foo\", \"nameWithoutDot\")).isFile(),\n        assertThat(path.join(resourcesDir, \"bar\", \"hello.txt\")).isFile(),\n        assertThat(path.join(resourcesDir, \"dir-relative\", \"f.txt\")).isFile(),\n        assertThat(path.join(resourcesDir, \"bar\", `${process.arch}.txt`)).isFile(),\n        assertThat(path.join(resourcesDir, osName, `${process.arch}.txt`)).isFile(),\n        assertThat(path.join(resourcesDir, \"platformSpecificR\")).isFile(),\n        assertThat(path.join(resourcesDir, \"ignoreMe.txt\")).doesNotExist(),\n      ])\n    },\n  })\n}\n\ntest.ifDevOrLinuxCi(\"extraResources on Linux\", () => doExtraResourcesTest(Platform.LINUX))\n\n// Squirrel.Windows is not supported on macOS anymore (32-bit)\ntest.ifNotMac.ifDevOrWinCi(\"extraResources on Windows\", () => doExtraResourcesTest(Platform.WINDOWS))\n\ntest.ifMac(\"extraResources on macOS\", async () => {\n  await doExtraResourcesTest(Platform.MAC)\n})\n\ntest.ifNotWindows.ifNotCiWin(\"extraResources - two-package\", () => {\n  const platform = Platform.LINUX\n  const osName = platform.buildConfigurationKey\n\n  //noinspection SpellCheckingInspection\n  return assertPack(\"test-app\", {\n    // to check NuGet package\n    targets: platform.createTarget(DIR_TARGET),\n    config: {\n      asar: true,\n      extraResources: [\n        \"foo\",\n        \"bar/hello.txt\",\n        \"bar/${arch}.txt\",\n        \"${os}/${arch}.txt\",\n        \"executable*\",\n      ],\n      [osName]: {\n        extraResources: [\n          \"platformSpecificR\"\n        ],\n        extraFiles: [\n          \"platformSpecificF\"\n        ],\n      },\n    },\n  }, {\n    projectDirCreated: projectDir => {\n      return Promise.all([\n        outputFile(path.join(projectDir, \"foo/nameWithoutDot\"), \"nameWithoutDot\"),\n        outputFile(path.join(projectDir, \"bar/hello.txt\"), \"data\", {mode: 0o400}),\n        outputFile(path.join(projectDir, `bar/${process.arch}.txt`), \"data\"),\n        outputFile(path.join(projectDir, `${osName}/${process.arch}.txt`), \"data\"),\n        outputFile(path.join(projectDir, \"platformSpecificR\"), \"platformSpecificR\"),\n        outputFile(path.join(projectDir, \"ignoreMe.txt\"), \"ignoreMe\"),\n        outputFile(path.join(projectDir, \"executable\"), \"executable\", {mode: 0o755}),\n        outputFile(path.join(projectDir, \"executableOnlyOwner\"), \"executable\", {mode: 0o740}),\n      ])\n    },\n    packed: async context => {\n      const base = path.join(context.outDir, `${platform.buildConfigurationKey}-unpacked`)\n      let resourcesDir = path.join(base, \"resources\")\n      if (platform === Platform.MAC) {\n        resourcesDir = path.join(base, \"TestApp.app\", \"Contents\", \"Resources\")\n      }\n      const appDir = path.join(resourcesDir, \"app\")\n\n      await Promise.all([\n        assertThat(path.join(resourcesDir, \"foo\")).isDirectory(),\n        assertThat(path.join(appDir, \"foo\")).doesNotExist(),\n\n        assertThat(path.join(resourcesDir, \"foo\", \"nameWithoutDot\")).isFile(),\n        assertThat(path.join(appDir, \"foo\", \"nameWithoutDot\")).doesNotExist(),\n\n        assertThat(path.join(resourcesDir, \"bar\", \"hello.txt\")).isFile(),\n        assertThat(path.join(resourcesDir, \"bar\", `${process.arch}.txt`)).isFile(),\n        assertThat(path.join(appDir, \"bar\", `${process.arch}.txt`)).doesNotExist(),\n\n        assertThat(path.join(resourcesDir, osName, `${process.arch}.txt`)).isFile(),\n        assertThat(path.join(resourcesDir, \"platformSpecificR\")).isFile(),\n        assertThat(path.join(resourcesDir, \"ignoreMe.txt\")).doesNotExist(),\n\n        allCan(path.join(resourcesDir, \"executable\"), true),\n        allCan(path.join(resourcesDir, \"executableOnlyOwner\"), true),\n\n        allCan(path.join(resourcesDir, \"bar\", \"hello.txt\"), false),\n      ])\n\n      expect(await fs.readFile(path.join(resourcesDir, \"bar\", \"hello.txt\"), \"utf-8\")).toEqual(\"data\")\n    },\n  })\n})\n\n// https://github.com/electron-userland/electron-builder/pull/998\n// copyDir walks to a symlink referencing a file that has not yet been copied by postponing the linking step until after the full walk is complete\ntest.ifNotWindows(\"postpone symlink\", async () => {\n  const tmpDir = new TmpDir(\"files-test\")\n  const source = await tmpDir.getTempDir()\n  const aSourceFile = path.join(source, \"z\", \"Z\")\n  const bSourceFileLink = path.join(source, \"B\")\n  await outputFile(aSourceFile, \"test\")\n  await fs.symlink(aSourceFile, bSourceFileLink)\n\n  const dest = await tmpDir.getTempDir()\n  await copyDir(source, dest)\n\n  await tmpDir.cleanup()\n})\n\nasync function allCan(file: string, execute: boolean) {\n  const mode = new Mode(await fs.stat(file))\n\n  function checkExecute(value: RWX) {\n    if (value.execute !== execute) {\n      throw new Error(`${file} is ${execute ? \"not \" : \"\"}executable`)\n    }\n  }\n\n  function checkRead(value: RWX) {\n    if (!value.read) {\n      throw new Error(`${file} is not readable`)\n    }\n  }\n\n  checkExecute(mode.owner)\n  checkExecute(mode.group)\n  checkExecute(mode.others)\n\n  checkRead(mode.owner)\n  checkRead(mode.group)\n  checkRead(mode.others)\n}"]}