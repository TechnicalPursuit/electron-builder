{"version":3,"file":"nsisUpdaterTest.js","sourceRoot":"","sources":["../../src/updater/nsisUpdaterTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { BintrayOptions, GenericServerOptions, GithubOptions, S3Options, SpacesOptions } from \"builder-util-runtime\"\nimport { UpdateCheckResult } from \"electron-updater\"\nimport { outputFile } from \"fs-extra\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\nimport { assertThat } from \"../helpers/fileAssert\"\nimport { removeUnstableProperties } from \"../helpers/packTester\"\nimport { createNsisUpdater, trackEvents, validateDownload, writeUpdateConfig } from \"../helpers/updaterTestUtil\"\n\nif (process.env.ELECTRON_BUILDER_OFFLINE === \"true\") {\n  fit(\"Skip ArtifactPublisherTest suite — ELECTRON_BUILDER_OFFLINE is defined\", () => {\n    console.warn(\"[SKIP] Skip ArtifactPublisherTest suite — ELECTRON_BUILDER_OFFLINE is defined\")\n  })\n}\n\ntest(\"check updates - no versions at all\", async () => {\n  const updater = await createNsisUpdater()\n  // tslint:disable-next-line:no-object-literal-type-assertion\n  updater.setFeedURL({\n    provider: \"bintray\",\n    owner: \"actperepo\",\n    package: \"no-versions\",\n  } as BintrayOptions)\n\n  await assertThat(updater.checkForUpdates()).throws()\n})\n\nasync function testUpdateFromBintray(version?: string) {\n  const updater = await createNsisUpdater(version)\n  updater.allowDowngrade = true\n  updater.updateConfigPath = await writeUpdateConfig<BintrayOptions>({\n    provider: \"bintray\",\n    owner: \"actperepo\",\n    package: \"TestApp\",\n  })\n\n  const actualEvents: Array<string> = []\n  const expectedEvents = [\"checking-for-update\", \"update-available\", \"update-downloaded\"]\n  for (const eventName of expectedEvents) {\n    updater.addListener(eventName, () => {\n      actualEvents.push(eventName)\n    })\n  }\n\n  const updateCheckResult = await updater.checkForUpdates()\n  expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n  await checkDownloadPromise(updateCheckResult)\n\n  expect(actualEvents).toEqual(expectedEvents)\n}\ntest(\"file url (bintray)\", () => testUpdateFromBintray(undefined))\n\ntest(\"downgrade (disallowed, bintray)\", async () => {\n  const updater = await createNsisUpdater(\"2.0.0\")\n  updater.updateConfigPath = await writeUpdateConfig<BintrayOptions>({\n    provider: \"bintray\",\n    owner: \"actperepo\",\n    package: \"TestApp\",\n  })\n\n  const actualEvents: Array<string> = []\n  const expectedEvents = [\"checking-for-update\", \"update-not-available\"]\n  for (const eventName of expectedEvents) {\n    updater.addListener(eventName, () => {\n      actualEvents.push(eventName)\n    })\n  }\n\n  const updateCheckResult = await updater.checkForUpdates()\n  expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n  // noinspection JSIgnoredPromiseFromCall\n  expect(updateCheckResult.downloadPromise).toBeUndefined()\n\n  expect(actualEvents).toEqual(expectedEvents)\n})\n\ntest(\"downgrade (disallowed, beta)\", async () => {\n  const updater = await createNsisUpdater(\"1.5.2-beta.4\")\n  updater.updateConfigPath = await writeUpdateConfig<GithubOptions>({\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release\",\n  })\n\n  const actualEvents: Array<string> = []\n  const expectedEvents = [\"checking-for-update\", \"update-not-available\"]\n  for (const eventName of expectedEvents) {\n    updater.addListener(eventName, () => {\n      actualEvents.push(eventName)\n    })\n  }\n\n  const updateCheckResult = await updater.checkForUpdates()\n  expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n  // noinspection JSIgnoredPromiseFromCall\n  expect(updateCheckResult.downloadPromise).toBeUndefined()\n\n  expect(actualEvents).toEqual(expectedEvents)\n})\n\ntest(\"downgrade (allowed)\", () => testUpdateFromBintray(\"2.0.0-beta.1\"))\n\ntest(\"file url generic\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n  })\n  await validateDownload(updater)\n})\n\ntest.skip(\"DigitalOcean Spaces\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<SpacesOptions>({\n    provider: \"spaces\",\n    name: \"electron-builder-test\",\n    path: \"light-updater-test\",\n    region: \"nyc3\",\n  })\n  await validateDownload(updater)\n})\n\ntest.skip.ifNotCiWin(\"sha512 mismatch error event\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n    channel: \"beta\",\n  })\n\n  const actualEvents = trackEvents(updater)\n\n  const updateCheckResult = await updater.checkForUpdates()\n  expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n  await assertThat(updateCheckResult.downloadPromise).throws()\n\n  expect(actualEvents).toMatchSnapshot()\n})\n\ntest(\"file url generic - manual download\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n  })\n  updater.autoDownload = false\n\n  const actualEvents = trackEvents(updater)\n\n  const updateCheckResult = await updater.checkForUpdates()\n  expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n  // noinspection JSIgnoredPromiseFromCall\n  expect(updateCheckResult.downloadPromise).toBeNull()\n  expect(actualEvents).toMatchSnapshot()\n\n  await assertThat(path.join((await updater.downloadUpdate())[0])).isFile()\n})\n\n// https://github.com/electron-userland/electron-builder/issues/1045\ntest(\"checkForUpdates several times\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n  })\n\n  const actualEvents = trackEvents(updater)\n\n  for (let i = 0; i < 10; i++) {\n    //noinspection JSIgnoredPromiseFromCall\n    updater.checkForUpdates()\n  }\n\n  async function checkForUpdates() {\n    const updateCheckResult = await updater.checkForUpdates()\n    expect(removeUnstableProperties(updateCheckResult.updateInfo)).toMatchSnapshot()\n    await checkDownloadPromise(updateCheckResult)\n  }\n\n  await checkForUpdates()\n  // we must not download the same file again\n  await checkForUpdates()\n\n  expect(actualEvents).toMatchSnapshot()\n})\n\nasync function checkDownloadPromise(updateCheckResult: UpdateCheckResult) {\n  return await assertThat(path.join((await updateCheckResult.downloadPromise)!![0])).isFile()\n}\n\ntest(\"file url github\", async () => {\n  const updater = await createNsisUpdater()\n  const options: GithubOptions = {\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release\",\n  }\n  updater.updateConfigPath = await writeUpdateConfig(options)\n  updater.signals.updateDownloaded(info => {\n    expect(info.downloadedFile).not.toBeNull()\n    delete info.downloadedFile\n    expect(info).toMatchSnapshot()\n  })\n  await validateDownload(updater)\n})\n\ntest(\"file url github pre-release and fullChangelog\", async () => {\n  const updater = await createNsisUpdater(\"1.5.0-beta.1\")\n  const options: GithubOptions = {\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release\",\n  }\n  updater.fullChangelog = true\n  updater.updateConfigPath = await writeUpdateConfig(options)\n  updater.signals.updateDownloaded(info => {\n    expect(info.downloadedFile).not.toBeNull()\n    delete info.downloadedFile\n    expect(info).toMatchSnapshot()\n  })\n  const updateCheckResult = await validateDownload(updater)\n  expect(updateCheckResult.updateInfo).toMatchSnapshot()\n})\n\ntest.skip(\"file url github private\", async () => {\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig<GithubOptions>({\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release_private\",\n    private: true,\n  })\n  await validateDownload(updater)\n})\n\ntest(\"test error\", async () => {\n  const updater = await createNsisUpdater(\"0.0.1\")\n  const actualEvents = trackEvents(updater)\n\n  await assertThat(updater.checkForUpdates()).throws()\n  expect(actualEvents).toMatchSnapshot()\n})\n\ntest.skip(\"test download progress\", async () => {\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\"\n  })\n  updater.autoDownload = false\n\n  const progressEvents: Array<any> = []\n\n  updater.signals.progress(it => progressEvents.push(it))\n\n  await updater.checkForUpdates()\n  await updater.downloadUpdate()\n\n  expect(progressEvents.length).toBeGreaterThanOrEqual(1)\n\n  const lastEvent = progressEvents.pop()\n\n  expect(lastEvent.percent).toBe(100)\n  expect(lastEvent.bytesPerSecond).toBeGreaterThan(1)\n  expect(lastEvent.transferred).toBe(lastEvent.total)\n})\n\ntest.ifAll.ifWindows(\"valid signature\", async () => {\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig({\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release\",\n    publisherName: [\"Vladimir Krivosheev\"],\n  })\n  await validateDownload(updater)\n})\n\ntest.ifAll.ifWindows(\"invalid signature\", async () => {\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig({\n    provider: \"github\",\n    owner: \"develar\",\n    repo: \"__test_nsis_release\",\n    publisherName: [\"Foo Bar\"],\n  })\n  const actualEvents = trackEvents(updater)\n  await assertThat(updater.checkForUpdates().then((it): any => it.downloadPromise)).throws()\n  expect(actualEvents).toMatchSnapshot()\n})\n\n// disable for now\ntest.skip(\"90 staging percentage\", async () => {\n  const userIdFile = path.join(tmpdir(), \"electron-updater-test\", \"userData\", \".updaterId\")\n  await outputFile(userIdFile, \"1wa70172-80f8-5cc4-8131-28f5e0edd2a1\")\n\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig<S3Options>({\n    provider: \"s3\",\n    channel: \"staging-percentage\",\n    bucket: \"develar\",\n    path: \"test\",\n  })\n  await validateDownload(updater)\n})\n\ntest(\"1 staging percentage\", async () => {\n  const userIdFile = path.join(tmpdir(), \"electron-updater-test\", \"userData\", \".updaterId\")\n  await outputFile(userIdFile, \"12a70172-80f8-5cc4-8131-28f5e0edd2a1\")\n\n  const updater = await createNsisUpdater(\"0.0.1\")\n  updater.updateConfigPath = await writeUpdateConfig({\n    provider: \"s3\",\n    channel: \"staging-percentage-small\",\n    bucket: \"develar\",\n    path: \"test\",\n  })\n  await validateDownload(updater, false)\n})\n\ntest.skip(\"cancel download with progress\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/full-test\",\n  })\n\n  const progressEvents: Array<any> = []\n  updater.signals.progress(it => progressEvents.push(it))\n\n  let cancelled = false\n  updater.signals.updateCancelled(() => cancelled = true)\n\n  const checkResult = await updater.checkForUpdates()\n  checkResult.cancellationToken!!.cancel()\n\n  if (progressEvents.length > 0) {\n    const lastEvent = progressEvents[progressEvents.length - 1]\n    expect(lastEvent.percent).not.toBe(100)\n    expect(lastEvent.bytesPerSecond).toBeGreaterThan(1)\n    expect(lastEvent.transferred).not.toBe(lastEvent.total)\n  }\n\n  const downloadPromise = checkResult.downloadPromise!!\n  await assertThat(downloadPromise).throws()\n  expect(cancelled).toBe(true)\n})\n\ntest.ifAll(\"test download and install\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n  })\n\n  await validateDownload(updater)\n\n  const actualEvents = trackEvents(updater)\n  expect(actualEvents).toMatchObject([])\n  // await updater.quitAndInstall(true, false)\n})\n\ntest.ifAll(\"test downloaded installer\", async () => {\n  const updater = await createNsisUpdater()\n  updater.updateConfigPath = await writeUpdateConfig<GenericServerOptions>({\n    provider: \"generic\",\n    url: \"https://develar.s3.amazonaws.com/test\",\n  })\n\n  const actualEvents = trackEvents(updater)\n\n  expect(actualEvents).toMatchObject([])\n  // await updater.quitAndInstall(true, false)\n})\n"]}