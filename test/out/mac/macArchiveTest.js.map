{"version":3,"file":"macArchiveTest.js","sourceRoot":"","sources":["../../src/mac/macArchiveTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec } from \"builder-util\"\nimport { parseXml } from \"builder-util-runtime\"\nimport { Platform } from \"electron-builder\"\nimport { outputFile } from \"fs-extra\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport pathSorter from \"path-sort\"\nimport { assertThat } from \"../helpers/fileAssert\"\nimport { app, copyTestAsset, createMacTargetTest, getFixtureDir, parseFileList } from \"../helpers/packTester\"\n\ntest.ifMac.ifAll(\"invalid target\", () => assertThat(createMacTargetTest([\"ttt\" as any])()).throws())\n\ntest.ifNotWindows.ifAll(\"only zip\", createMacTargetTest([\"zip\"], undefined, false /* no need to test sign */))\n\ntest.ifNotWindows.ifAll(\"tar.gz\", createMacTargetTest([\"tar.gz\"]))\n\nconst it = process.env.CSC_KEY_PASSWORD == null ? test.skip : test.ifMac\n\nit(\"pkg\", createMacTargetTest([\"pkg\"]))\n\ntest.ifAll.ifMac(\"empty installLocation\", app({\n  targets: Platform.MAC.createTarget(\"pkg\"),\n  config: {\n    pkg: {\n      installLocation: \"\",\n    }\n  }\n}, {\n  signed: false,\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      copyTestAsset(\"license.txt\", path.join(projectDir, \"build\", \"license.txt\")),\n    ])\n  },\n}))\n\ntest.ifAll.ifMac(\"extraDistFiles\", app({\n  targets: Platform.MAC.createTarget(\"zip\"),\n  config: {\n    mac: {\n      extraDistFiles: \"extra.txt\"\n    }\n  }\n}, {\n  signed: false,\n  projectDirCreated: projectDir => {\n    return Promise.all([\n      outputFile(path.join(projectDir, \"extra.txt\"), \"test\"),\n    ])\n  },\n}))\n\ntest.ifAll.ifMac(\"pkg extended configuration\", app({\n  targets: Platform.MAC.createTarget(\"pkg\"),\n  config: {\n    pkg: {\n      isRelocatable: false,\n      isVersionChecked: false,\n      hasStrictIdentifier: false,\n      overwriteAction: \"update\",\n    }\n  }\n}, {\n  signed: false,\n  packed: async context => {\n    const pkgPath = path.join(context.outDir, \"Test App ßW-1.1.0.pkg\")\n    const unpackedDir = path.join(context.outDir, \"pkg-unpacked\")\n    await exec(\"pkgutil\", [\"--expand\", pkgPath, unpackedDir])\n\n    const packageInfoFile = path.join(unpackedDir, \"org.electron-builder.testApp.pkg\", \"PackageInfo\")\n    const info = parseXml(await fs.readFile(packageInfoFile, \"utf8\"))\n\n    const relocateElement = info.elementOrNull(\"relocate\")\n    if (relocateElement != null) {\n      expect(relocateElement.elements).toBeNull()\n    }\n\n    const upgradeBundleElement = info.elementOrNull(\"upgrade-bundle\")\n    if (upgradeBundleElement != null) {\n      expect(upgradeBundleElement.elements).toBeNull()\n    }\n\n    const updateBundleElement = info.elementOrNull(\"update-bundle\")\n    if (updateBundleElement != null) {\n      expect(updateBundleElement.elements).toHaveLength(1)\n    }\n\n    const strictIdentifierElement = info.elementOrNull(\"strict-identifier\")\n    if (strictIdentifierElement != null) {\n      expect(strictIdentifierElement.elements).toBeNull()\n    }\n  }\n}))\n\ntest.ifAll.ifMac(\"pkg scripts\", app({\n  targets: Platform.MAC.createTarget(\"pkg\"),\n}, {\n  signed: false,\n  projectDirCreated: async projectDir => {\n    await fs.symlink(path.join(getFixtureDir(), \"pkg-scripts\"), path.join(projectDir, \"build\", \"pkg-scripts\"))\n  },\n  packed: async context => {\n    const pkgPath = path.join(context.outDir, \"Test App ßW-1.1.0.pkg\")\n    console.log(\"CALL\")\n    const fileList = pathSorter(parseFileList(await exec(\"pkgutil\", [\"--payload-files\", pkgPath]), false))\n    expect(fileList).toMatchSnapshot()\n\n    const unpackedDir = path.join(context.outDir, \"pkg-unpacked\")\n    await exec(\"pkgutil\", [\"--expand\", pkgPath, unpackedDir])\n\n    const info = parseXml(await fs.readFile(path.join(unpackedDir, \"Distribution\"), \"utf8\"))\n    for (const element of info.getElements(\"pkg-ref\")) {\n      element.removeAttribute(\"installKBytes\")\n      const bundleVersion = element.elementOrNull(\"bundle-version\")\n      if (bundleVersion != null) {\n        bundleVersion.element(\"bundle\").removeAttribute(\"CFBundleVersion\")\n      }\n    }\n\n    // delete info.product.version\n    info.element(\"product\").removeAttribute(\"version\")\n\n    expect(info).toMatchSnapshot()\n\n    const scriptDir = path.join(unpackedDir, \"org.electron-builder.testApp.pkg\", \"Scripts\")\n    await Promise.all([\n      assertThat(path.join(scriptDir, \"postinstall\")).isFile(),\n      assertThat(path.join(scriptDir, \"preinstall\")).isFile(),\n    ])\n  }\n}))\n\n// todo failed on Travis CI\n//test(\"tar.xz\", createTargetTest([\"tar.xz\"], [\"Test App ßW-1.1.0-mac.tar.xz\"]))"]}