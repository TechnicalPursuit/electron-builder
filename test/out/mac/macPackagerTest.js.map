{"version":3,"file":"macPackagerTest.js","sourceRoot":"","sources":["../../src/mac/macPackagerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { copyOrLinkFile } from \"builder-util/out/fs\"\nimport { createTargets, DIR_TARGET, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { assertThat } from \"../helpers/fileAssert\"\nimport { app, appThrows, assertPack, platform } from \"../helpers/packTester\"\n\ntest.ifMac.ifAll(\"two-package\", () => assertPack(\"test-app\", {\n  targets: createTargets([Platform.MAC], null, \"all\"),\n  config: {\n    extraMetadata: {\n      repository: \"foo/bar\"\n    },\n    mac: {\n      electronUpdaterCompatibility: \">=2.16\",\n      electronLanguages: [\"bn\", \"en\"]\n    },\n    //tslint:disable-next-line:no-invalid-template-strings\n    artifactName: \"${name}-${version}-${os}.${ext}\",\n  },\n}, {\n  signed: true,\n  checkMacApp: async appDir => {\n    expect((await fs.readdir(path.join(appDir, \"Contents\", \"Resources\")))\n      .filter(it => !it.startsWith(\".\"))\n      .sort()).toMatchSnapshot()\n  },\n}))\n\ntest.ifMac(\"one-package\", app({\n  targets: Platform.MAC.createTarget(),\n  config: {\n    appId: \"bar\",\n    publish: {\n      provider: \"generic\",\n      //tslint:disable-next-line:no-invalid-template-strings\n      url: \"https://develar.s3.amazonaws.com/test/${os}/${arch}\",\n    },\n    mac: {\n      // test appId per platform\n      appId: \"foo\",\n      extendInfo: {\n        LSUIElement: true,\n      },\n      minimumSystemVersion: \"10.12.0\",\n      fileAssociations: [\n        {\n          ext: \"foo\",\n          name: \"Foo\",\n          role: \"Viewer\",\n        },\n        {\n          ext: \"boo\",\n          name: \"Boo\",\n          role: \"Shell\",\n          rank: \"Owner\",\n          isPackage: true,\n        },\n        {\n          ext: \"bar\",\n          name: \"Bar\",\n          role: \"Shell\",\n          rank: \"Default\",\n          // If I specify `fileAssociations.icon` as `build/foo.icns` will it know to use `build/foo.ico` for Windows?\n          icon: \"someFoo.ico\"\n        },\n      ]\n    }\n  }\n}, {\n  signed: false,\n  projectDirCreated: projectDir => Promise.all([\n    copyOrLinkFile(path.join(projectDir, \"build\", \"icon.icns\"), path.join(projectDir, \"build\", \"foo.icns\")),\n    copyOrLinkFile(path.join(projectDir, \"build\", \"icon.icns\"), path.join(projectDir, \"build\", \"someFoo.icns\")),\n  ]),\n  checkMacApp: async (appDir, info) => {\n    await assertThat(path.join(appDir, \"Contents\", \"Resources\", \"foo.icns\")).isFile()\n    await assertThat(path.join(appDir, \"Contents\", \"Resources\", \"someFoo.icns\")).isFile()\n  },\n}))\n\ntest.ifMac.ifAll(\"electronDist\", appThrows({\n  targets: Platform.MAC.createTarget(DIR_TARGET),\n  config: {\n    electronDist: \"foo\",\n  }\n}))\n\ntest.ifWinCi(\"Build macOS on Windows is not supported\", appThrows(platform(Platform.MAC)))"]}