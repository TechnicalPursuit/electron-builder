{"version":3,"file":"macCodeSignTest.js","sourceRoot":"","sources":["../../src/mac/macCodeSignTest.ts"],"names":[],"mappings":";;AAAA,+CAAqD;AACrD,0EAAyE;AACzE,0DAAkD;AAElD,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI,EAAE;IACxC,GAAG,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAC/E,OAAO,CAAC,IAAI,CAAC,6EAA6E,CAAC,CAAA;IAC7F,CAAC,CAAC,CAAA;CACH;AAED,MAAM,MAAM,GAAG,IAAI,qBAAM,CAAC,oBAAoB,CAAC,CAAA;AAE/C,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;IACvC,MAAM,MAAM,GAAG,MAAM,4BAAc,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,uBAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,EAAE,EAAC,CAAC,CAAA;IAC3I,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AAC7C,CAAC,CAAC,CAAA;AAEF,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAA;AAEjC,IAAI,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;IACvD,MAAM,MAAM,GAAG,MAAM,4BAAc,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,uBAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,EAAE,EAAC,CAAC,CAAA;IAC3I,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AAC7C,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,cAAc,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;IACzD,MAAM,CAAC,6BAAc,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IACzD,MAAM,CAAC,6BAAc,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IACpD,uCAAuC;IACvC,MAAM,CAAC,6BAAc,CAAC,iCAAiC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IAC3E,MAAM,CAAC,6BAAc,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IACnD,MAAM,CAAC,6BAAc,CAAC,uCAAuC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IACjF,MAAM,CAAC,6BAAc,CAAC,gMAAgM,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;AAC5O,CAAC,CAAC,CAAA","sourcesContent":["import { removePassword, TmpDir } from \"builder-util\"\nimport { createKeychain } from \"app-builder-lib/out/codeSign/macCodeSign\"\nimport { CSC_LINK } from \"../helpers/codeSignData\"\n\nif (process.env.CSC_KEY_PASSWORD == null) {\n  fit(\"Skip keychain-specific tests because CSC_KEY_PASSWORD is not defined\", () => {\n    console.warn(\"[SKIP] Skip keychain-specific tests because CSC_KEY_PASSWORD is not defined\")\n  })\n}\n\nconst tmpDir = new TmpDir(\"mac-code-sign-test\")\n\ntest.ifMac(\"create keychain\", async () => {\n  const result = await createKeychain({tmpDir, cscLink: CSC_LINK, cscKeyPassword: process.env.CSC_KEY_PASSWORD!!, currentDir: process.cwd()})\n  expect(result.keychainFile).not.toEqual(\"\")\n})\n\nafterEach(() => tmpDir.cleanup())\n\ntest.ifMac(\"create keychain with installers\", async () => {\n  const result = await createKeychain({tmpDir, cscLink: CSC_LINK, cscKeyPassword: process.env.CSC_KEY_PASSWORD!!, currentDir: process.cwd()})\n  expect(result.keychainFile).not.toEqual(\"\")\n})\n\ntest.ifDevOrLinuxCi(\"remove password from log\", async () => {\n  expect(removePassword(\"seq -P foo -B\")).toMatchSnapshot()\n  expect(removePassword(\"pass:foo\")).toMatchSnapshot()\n  // noinspection SpellCheckingInspection\n  expect(removePassword(\"/usr/bin/productbuild -P wefwef\")).toMatchSnapshot()\n  expect(removePassword(\" /p foo\")).toMatchSnapshot()\n  expect(removePassword('ConvertTo-SecureString -String \"test\"')).toMatchSnapshot()\n  expect(removePassword('(Get-PfxData \"C:\\\\Users\\\\develar\\\\AppData\\\\Local\\\\Temp\\\\electron-builder-yBY8D2\\\\0-1.p12\" -Password (ConvertTo-SecureString -String \"test\" -Force -AsPlainText)).EndEntityCertificates.Subject')).toMatchSnapshot()\n})"]}