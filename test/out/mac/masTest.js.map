{"version":3,"file":"masTest.js","sourceRoot":"","sources":["../../src/mac/masTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from \"electron-builder\"\nimport * as path from \"path\"\nimport { CheckingMacPackager } from \"../helpers/CheckingPackager\"\nimport { assertPack, createMacTargetTest, signed } from \"../helpers/packTester\"\nimport { promises as fs } from \"fs\"\n\nif (process.platform !== \"darwin\") {\n  fit(\"Skip mas tests because platform is not macOS\", () => {\n    console.warn(\"[SKIP] Skip mas tests because platform is not macOS\")\n  })\n}\nelse if (process.env.CSC_KEY_PASSWORD == null) {\n  fit(\"Skip mas tests because CSC_KEY_PASSWORD is not defined\", () => {\n    console.warn(\"[SKIP] Skip mas tests because CSC_KEY_PASSWORD is not defined\")\n  })\n}\n\ntest.ifNotCi(\"mas\", createMacTargetTest([\"mas\"]))\ntest.ifNotCi.ifAll(\"dev\", createMacTargetTest([\"mas-dev\"]))\ntest.ifNotCi.ifAll(\"mas and 7z\", createMacTargetTest([\"mas\", \"7z\"]))\n\ntest.skip.ifAll(\"custom mas\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return assertPack(\"test-app-one\", signed({\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform) => platformPackager = new CheckingMacPackager(packager),\n    config: {\n      mac: {\n        target: [\"mas\"],\n      },\n      mas: {\n        entitlements: \"mas-entitlements file path\",\n        entitlementsInherit: \"mas-entitlementsInherit file path\",\n      }\n    }\n  }), {\n    packed: () => {\n      expect(platformPackager!!.effectiveSignOptions).toMatchObject({\n        entitlements: \"mas-entitlements file path\",\n        \"entitlements-inherit\": \"mas-entitlementsInherit file path\",\n      })\n      return Promise.resolve(null)\n    }\n  })\n})\n\ntest.ifAll.ifNotCi(\"entitlements in the package.json\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return assertPack(\"test-app-one\", signed({\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform) => platformPackager = new CheckingMacPackager(packager),\n    config: {\n      mac: {\n        entitlements: \"osx-entitlements file path\",\n        entitlementsInherit: \"osx-entitlementsInherit file path\",\n      }\n    }\n  }), {\n    packed: () => {\n      expect(platformPackager!!.effectiveSignOptions).toMatchObject({\n        entitlements: \"osx-entitlements file path\",\n        \"entitlements-inherit\": \"osx-entitlementsInherit file path\",\n      })\n      return Promise.resolve()\n    }\n  })\n})\n\ntest.ifAll.ifNotCi(\"entitlements in build dir\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return assertPack(\"test-app-one\", signed({\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform) => platformPackager = new CheckingMacPackager(packager),\n  }), {\n    projectDirCreated: projectDir => Promise.all([\n      fs.writeFile(path.join(projectDir, \"build\", \"entitlements.mac.plist\"), \"\"),\n      fs.writeFile(path.join(projectDir, \"build\", \"entitlements.mac.inherit.plist\"), \"\"),\n    ]),\n    packed: context => {\n      expect(platformPackager!!.effectiveSignOptions).toMatchObject({\n        entitlements: path.join(context.projectDir, \"build\", \"entitlements.mac.plist\"),\n        \"entitlements-inherit\": path.join(context.projectDir, \"build\", \"entitlements.mac.inherit.plist\"),\n      })\n      return Promise.resolve()\n    }\n  })\n})\n"]}