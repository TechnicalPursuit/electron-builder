{"version":3,"file":"macIconTest.js","sourceRoot":"","sources":["../../src/mac/macIconTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIR_TARGET, Platform } from \"electron-builder\"\nimport { promises as fs } from \"fs\"\nimport * as path from \"path\"\nimport { CheckingMacPackager } from \"../helpers/CheckingPackager\"\nimport { app } from \"../helpers/packTester\"\nimport { remove } from \"fs-extra\"\n\nasync function assertIcon(platformPackager: CheckingMacPackager) {\n  const file = await platformPackager.getIconPath()\n  expect(file).toBeDefined()\n\n  const result = await platformPackager.resolveIcon([file!!], [], \"set\")\n  result.forEach(it => {\n    it.file = path.basename(it.file)\n  })\n  expect(result).toMatchSnapshot()\n}\n\ntest.ifMac.ifAll(\"icon set\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n    ]),\n    packed: () => assertIcon(platformPackager!!),\n  })()\n})\n\ntest.ifMac.ifAll(\"custom icon set\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    config: {\n      mac: {\n        icon: \"customIconSet\",\n      },\n    },\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n      fs.rename(path.join(projectDir, \"build\", \"icons\"), path.join(projectDir, \"customIconSet\")),\n    ]),\n    packed: () => assertIcon(platformPackager!!),\n  })()\n})\n\ntest.ifMac.ifAll(\"custom icon set with only 512 and 128\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    config: {\n      mac: {\n        icon: \"..\",\n      },\n    },\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n      fs.copyFile(path.join(projectDir, \"build\", \"icons\", \"512x512.png\"), path.join(projectDir, \"512x512.png\")),\n      fs.copyFile(path.join(projectDir, \"build\", \"icons\", \"128x128.png\"), path.join(projectDir, \"128x128.png\")),\n    ]),\n    packed: () => assertIcon(platformPackager!!),\n  })()\n})\n\ntest.ifMac.ifAll(\"png icon\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    config: {\n      mac: {\n        icon: \"icons/512x512.png\",\n      },\n    },\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n    ]),\n    packed: () => assertIcon(platformPackager!!),\n  })()\n})\n\ntest.ifMac.ifAll(\"default png icon\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n      fs.copyFile(path.join(projectDir, \"build\", \"icons\", \"512x512.png\"), path.join(projectDir, \"build\", \"icon.png\"))\n        .then(() => remove(path.join(projectDir, \"build\", \"icons\")))\n    ]),\n    packed: () => assertIcon(platformPackager!!),\n  })()\n})\n\ntest.ifMac.ifAll(\"png icon small\", () => {\n  let platformPackager: CheckingMacPackager | null = null\n  return app({\n    targets: Platform.MAC.createTarget(DIR_TARGET),\n    config: {\n      mac: {\n        icon: \"icons/128x128.png\",\n      },\n    },\n    platformPackagerFactory: packager => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => Promise.all([\n      fs.unlink(path.join(projectDir, \"build\", \"icon.icns\")),\n      fs.unlink(path.join(projectDir, \"build\", \"icon.ico\")),\n    ]),\n    packed: async () => {\n      try {\n        await platformPackager!!.getIconPath()\n      }\n      catch (e) {\n        if (!e.message.includes(\"must be at least 512x512\")) {\n          throw e\n        }\n        return\n      }\n\n      throw new Error(\"error expected\")\n    },\n  })()\n})"]}